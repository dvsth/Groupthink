{"id":"../node_modules/@projectstorm/react-canvas-core/dist/es/states/DragCanvasState.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DragCanvasState.js.map","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\DragCanvasState.ts","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\package.json","includedInParent":true,"mtime":1594481777970},{"name":"../core-state/AbstractDisplacementState","loc":{"line":13,"column":44},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DragCanvasState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-state\\AbstractDisplacementState.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DragCanvasState = void 0;\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\nclass DragCanvasState extends AbstractDisplacementState_1.AbstractDisplacementState {\n    constructor() {\n        super({\n            name: 'drag-canvas'\n        });\n    }\n    activated(prev) {\n        const _super = Object.create(null, {\n            activated: { get: () => super.activated }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            _super.activated.call(this, prev);\n            this.engine.getModel().clearSelection();\n            yield this.engine.repaintCanvas(true);\n            // we can block layer rendering because we are only targeting the transforms\n            for (let layer of this.engine.getModel().getLayers()) {\n                layer.allowRepaint(false);\n            }\n            this.initialCanvasX = this.engine.getModel().getOffsetX();\n            this.initialCanvasY = this.engine.getModel().getOffsetY();\n        });\n    }\n    deactivated(next) {\n        super.deactivated(next);\n        for (let layer of this.engine.getModel().getLayers()) {\n            layer.allowRepaint(true);\n        }\n    }\n    fireMouseMoved(event) {\n        this.engine\n            .getModel()\n            .setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n        this.engine.repaintCanvas();\n    }\n}\nexports.DragCanvasState = DragCanvasState;\n"},"sourceMaps":{"js":{"version":3,"file":"DragCanvasState.js","sourceRoot":"","sources":["../../../src/states/DragCanvasState.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uFAAoH;AAGpH,MAAa,eAAgB,SAAQ,qDAAyB;IAK7D;QACC,KAAK,CAAC;YACL,IAAI,EAAE,aAAa;SACnB,CAAC,CAAC;IACJ,CAAC;IAEK,SAAS,CAAC,IAAI;;;;;YACnB,OAAM,SAAS,YAAC,IAAI,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAC;YACxC,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAEtC,4EAA4E;YAC5E,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,EAAE;gBACrD,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAC1B;YAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;YAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QAC3D,CAAC;KAAA;IAED,WAAW,CAAC,IAAW;QACtB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,EAAE;YACrD,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACzB;IACF,CAAC;IAED,cAAc,CAAC,KAAqC;QACnD,IAAI,CAAC,MAAM;aACT,QAAQ,EAAE;aACV,SAAS,CAAC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;QAClG,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;CACD;AAtCD,0CAsCC","sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\n\nexport class DragCanvasState extends AbstractDisplacementState {\n\t// store this as we drag the canvas\n\tinitialCanvasX: number;\n\tinitialCanvasY: number;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'drag-canvas'\n\t\t});\n\t}\n\n\tasync activated(prev) {\n\t\tsuper.activated(prev);\n\t\tthis.engine.getModel().clearSelection();\n\t\tawait this.engine.repaintCanvas(true);\n\n\t\t// we can block layer rendering because we are only targeting the transforms\n\t\tfor (let layer of this.engine.getModel().getLayers()) {\n\t\t\tlayer.allowRepaint(false);\n\t\t}\n\n\t\tthis.initialCanvasX = this.engine.getModel().getOffsetX();\n\t\tthis.initialCanvasY = this.engine.getModel().getOffsetY();\n\t}\n\n\tdeactivated(next: State) {\n\t\tsuper.deactivated(next);\n\t\tfor (let layer of this.engine.getModel().getLayers()) {\n\t\t\tlayer.allowRepaint(true);\n\t\t}\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tthis.engine\n\t\t\t.getModel()\n\t\t\t.setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n"]}},"error":null,"hash":"8b72a180f517837d90983a9039e5fb10","cacheData":{"env":{}}}