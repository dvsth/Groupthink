{"id":"../node_modules/@projectstorm/react-diagrams-core/dist/es/entities/node-layer/NodeLayerModel.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node-layer\\NodeLayerModel.js.map","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\node-layer\\NodeLayerModel.ts","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\package.json","includedInParent":true,"mtime":1594481777956},{"name":"@projectstorm/react-canvas-core","loc":{"line":4,"column":36},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node-layer\\NodeLayerModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\index.js"},{"name":"../node/NodeModel","loc":{"line":5,"column":28},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node-layer\\NodeLayerModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node\\NodeModel.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeLayerModel = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst NodeModel_1 = require(\"../node/NodeModel\");\nclass NodeLayerModel extends react_canvas_core_1.LayerModel {\n    constructor() {\n        super({\n            type: 'diagram-nodes',\n            isSvg: false,\n            transformed: true\n        });\n    }\n    addModel(model) {\n        if (!(model instanceof NodeModel_1.NodeModel)) {\n            throw new Error('Can only add nodes to this layer');\n        }\n        model.registerListener({\n            entityRemoved: () => {\n                this.getParent().removeNode(model);\n            }\n        });\n        super.addModel(model);\n    }\n    getChildModelFactoryBank(engine) {\n        return engine.getNodeFactories();\n    }\n    getNodes() {\n        return this.getModels();\n    }\n}\nexports.NodeLayerModel = NodeLayerModel;\n"},"sourceMaps":{"js":{"version":3,"file":"NodeLayerModel.js","sourceRoot":"","sources":["../../../../src/entities/node-layer/NodeLayerModel.ts"],"names":[],"mappings":";;;AAAA,uEAAiF;AACjF,iDAA8C;AAS9C,MAAa,cAA0E,SAAQ,8BAAa;IAC3G;QACC,KAAK,CAAC;YACL,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,KAAK;YACZ,WAAW,EAAE,IAAI;SACjB,CAAC,CAAC;IACJ,CAAC;IAED,QAAQ,CAAC,KAAoB;QAC5B,IAAI,CAAC,CAAC,KAAK,YAAY,qBAAS,CAAC,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACpD;QACD,KAAK,CAAC,gBAAgB,CAAC;YACtB,aAAa,EAAE,GAAG,EAAE;gBAClB,IAAI,CAAC,SAAS,EAAmB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACtD,CAAC;SACD,CAAC,CAAC;QACH,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,wBAAwB,CAAC,MAAmB;QAC3C,OAAO,MAAM,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IACzB,CAAC;CACD;AA5BD,wCA4BC","sourcesContent":["import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { NodeModel } from '../node/NodeModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface NodeLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: NodeModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class NodeLayerModel<G extends NodeLayerModelGenerics = NodeLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-nodes',\n\t\t\tisSvg: false,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof NodeModel)) {\n\t\t\tthrow new Error('Can only add nodes to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeNode(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getNodeFactories();\n\t}\n\n\tgetNodes() {\n\t\treturn this.getModels();\n\t}\n}\n"]}},"error":null,"hash":"8031532c07f04d046f98d83c99b870a9","cacheData":{"env":{}}}