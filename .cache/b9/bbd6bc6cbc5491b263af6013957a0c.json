{"id":"../node_modules/@projectstorm/react-canvas-core/dist/es/states/SelectionBoxState.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\SelectionBoxState.js.map","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\SelectionBoxState.ts","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\package.json","includedInParent":true,"mtime":1594481777970},{"name":"../core-state/AbstractDisplacementState","loc":{"line":4,"column":44},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\SelectionBoxState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-state\\AbstractDisplacementState.js"},{"name":"../entities/selection/SelectionLayerModel","loc":{"line":5,"column":38},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\SelectionBoxState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\entities\\selection\\SelectionLayerModel.js"},{"name":"@projectstorm/geometry","loc":{"line":6,"column":27},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\SelectionBoxState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\geometry\\dist\\es\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectionBoxState = void 0;\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\nconst SelectionLayerModel_1 = require(\"../entities/selection/SelectionLayerModel\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nclass SelectionBoxState extends AbstractDisplacementState_1.AbstractDisplacementState {\n    constructor() {\n        super({\n            name: 'selection-box'\n        });\n    }\n    activated(previous) {\n        super.activated(previous);\n        this.layer = new SelectionLayerModel_1.SelectionLayerModel();\n        this.engine.getModel().addLayer(this.layer);\n    }\n    deactivated(next) {\n        super.deactivated(next);\n        this.layer.remove();\n        this.engine.repaintCanvas();\n    }\n    getBoxDimensions(event) {\n        const rel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n        return {\n            left: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n            top: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n            width: Math.abs(rel.x - this.initialXRelative),\n            height: Math.abs(rel.y - this.initialYRelative),\n            right: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n            bottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n        };\n    }\n    fireMouseMoved(event) {\n        this.layer.setBox(this.getBoxDimensions(event));\n        const relative = this.engine.getRelativeMousePoint({\n            clientX: this.initialX,\n            clientY: this.initialY\n        });\n        if (event.virtualDisplacementX < 0) {\n            relative.x -= Math.abs(event.virtualDisplacementX);\n        }\n        if (event.virtualDisplacementY < 0) {\n            relative.y -= Math.abs(event.virtualDisplacementY);\n        }\n        const rect = new geometry_1.Rectangle(relative, Math.abs(event.virtualDisplacementX), Math.abs(event.virtualDisplacementY));\n        for (let model of this.engine.getModel().getSelectionEntities()) {\n            if (model.getBoundingBox) {\n                const bounds = model.getBoundingBox();\n                if (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n                    model.setSelected(true);\n                }\n                else {\n                    model.setSelected(false);\n                }\n            }\n        }\n        this.engine.repaintCanvas();\n    }\n}\nexports.SelectionBoxState = SelectionBoxState;\n"},"sourceMaps":{"js":{"version":3,"file":"SelectionBoxState.js","sourceRoot":"","sources":["../../../src/states/SelectionBoxState.ts"],"names":[],"mappings":";;;AAAA,uFAAoH;AAEpH,mFAAgF;AAChF,qDAAmD;AAGnD,MAAa,iBAAkB,SAAQ,qDAAyB;IAG/D;QACC,KAAK,CAAC;YACL,IAAI,EAAE,eAAe;SACrB,CAAC,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,QAAe;QACxB,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,yCAAmB,EAAE,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,WAAW,CAAC,IAAW;QACtB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED,gBAAgB,CAAC,KAAqC;QACrD,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEnF,OAAO;YACN,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACnE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAClE,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC9C,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC/C,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACpE,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACrE,CAAC;IACH,CAAC;IAED,cAAc,CAAC,KAAqC;QACnD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;QAEhD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;YAClD,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,OAAO,EAAE,IAAI,CAAC,QAAQ;SACtB,CAAC,CAAC;QACH,IAAI,KAAK,CAAC,oBAAoB,GAAG,CAAC,EAAE;YACnC,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACnD;QACD,IAAI,KAAK,CAAC,oBAAoB,GAAG,CAAC,EAAE;YACnC,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACnD;QACD,MAAM,IAAI,GAAG,IAAI,oBAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAEjH,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,oBAAoB,EAAE,EAAE;YAChE,IAAM,KAA4C,CAAC,cAAc,EAAE;gBAClE,MAAM,MAAM,GAAK,KAA4C,CAAC,cAAc,EAAE,CAAC;gBAC/E,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,EAAE;oBAC3F,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;iBACxB;qBAAM;oBACN,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;iBACzB;aACD;SACD;QAED,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;CACD;AA9DD,8CA8DC","sourcesContent":["import { AbstractDisplacementState, AbstractDisplacementStateEvent } from '../core-state/AbstractDisplacementState';\nimport { State } from '../core-state/State';\nimport { SelectionLayerModel } from '../entities/selection/SelectionLayerModel';\nimport { Rectangle } from '@projectstorm/geometry';\nimport { ModelGeometryInterface } from '../core/ModelGeometryInterface';\n\nexport class SelectionBoxState extends AbstractDisplacementState {\n\tlayer: SelectionLayerModel;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'selection-box'\n\t\t});\n\t}\n\n\tactivated(previous: State) {\n\t\tsuper.activated(previous);\n\t\tthis.layer = new SelectionLayerModel();\n\t\tthis.engine.getModel().addLayer(this.layer);\n\t}\n\n\tdeactivated(next: State) {\n\t\tsuper.deactivated(next);\n\t\tthis.layer.remove();\n\t\tthis.engine.repaintCanvas();\n\t}\n\n\tgetBoxDimensions(event: AbstractDisplacementStateEvent): ClientRect {\n\t\tconst rel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n\n\t\treturn {\n\t\t\tleft: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n\t\t\ttop: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n\t\t\twidth: Math.abs(rel.x - this.initialXRelative),\n\t\t\theight: Math.abs(rel.y - this.initialYRelative),\n\t\t\tright: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n\t\t\tbottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n\t\t};\n\t}\n\n\tfireMouseMoved(event: AbstractDisplacementStateEvent) {\n\t\tthis.layer.setBox(this.getBoxDimensions(event));\n\n\t\tconst relative = this.engine.getRelativeMousePoint({\n\t\t\tclientX: this.initialX,\n\t\t\tclientY: this.initialY\n\t\t});\n\t\tif (event.virtualDisplacementX < 0) {\n\t\t\trelative.x -= Math.abs(event.virtualDisplacementX);\n\t\t}\n\t\tif (event.virtualDisplacementY < 0) {\n\t\t\trelative.y -= Math.abs(event.virtualDisplacementY);\n\t\t}\n\t\tconst rect = new Rectangle(relative, Math.abs(event.virtualDisplacementX), Math.abs(event.virtualDisplacementY));\n\n\t\tfor (let model of this.engine.getModel().getSelectionEntities()) {\n\t\t\tif (((model as unknown) as ModelGeometryInterface).getBoundingBox) {\n\t\t\t\tconst bounds = ((model as unknown) as ModelGeometryInterface).getBoundingBox();\n\t\t\t\tif (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n\t\t\t\t\tmodel.setSelected(true);\n\t\t\t\t} else {\n\t\t\t\t\tmodel.setSelected(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n"]}},"error":null,"hash":"8ae635ece037e782703478d4a30a9a9e","cacheData":{"env":{}}}