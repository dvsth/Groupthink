{"id":"../node_modules/@projectstorm/react-diagrams-routing/dist/es/link/PathFindingLinkFactory.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js.map","includedInParent":true,"mtime":1594481777960},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\src\\link\\PathFindingLinkFactory.tsx","includedInParent":true,"mtime":1594481777960},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\package.json","includedInParent":true,"mtime":1594481777960},{"name":"react","loc":{"line":4,"column":22},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\react\\index.js"},{"name":"./PathFindingLinkModel","loc":{"line":5,"column":39},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkModel.js"},{"name":"./PathFindingLinkWidget","loc":{"line":6,"column":40},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkWidget.js"},{"name":"lodash","loc":{"line":7,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"},{"name":"paths-js/path","loc":{"line":8,"column":21},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\paths-js\\path.js"},{"name":"@projectstorm/react-diagrams-defaults","loc":{"line":9,"column":42},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\index.js"},{"name":"@projectstorm/react-canvas-core","loc":{"line":10,"column":36},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\PathFindingLinkFactory.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PathFindingLinkFactory = void 0;\nconst React = require(\"react\");\nconst PathFindingLinkModel_1 = require(\"./PathFindingLinkModel\");\nconst PathFindingLinkWidget_1 = require(\"./PathFindingLinkWidget\");\nconst _ = require(\"lodash\");\nconst Path = require(\"paths-js/path\");\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nlet PathFindingLinkFactory = /** @class */ (() => {\n    class PathFindingLinkFactory extends react_diagrams_defaults_1.DefaultLinkFactory {\n        constructor() {\n            super(PathFindingLinkFactory.NAME);\n            this.ROUTING_SCALING_FACTOR = 5;\n            // calculated only when smart routing is active\n            this.canvasMatrix = [];\n            this.routingMatrix = [];\n            // used when at least one element has negative coordinates\n            this.hAdjustmentFactor = 0;\n            this.vAdjustmentFactor = 0;\n            /**\n             * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n             * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n             */\n            this.calculateMatrixDimensions = () => {\n                const allNodesCoords = _.values(this.engine.getModel().getNodes()).map((item) => ({\n                    x: item.getX(),\n                    width: item.width,\n                    y: item.getY(),\n                    height: item.height\n                }));\n                const allLinks = _.values(this.engine.getModel().getLinks());\n                const allPortsCoords = _.flatMap(allLinks.map((link) => [link.getSourcePort(), link.getTargetPort()]))\n                    .filter((port) => port !== null)\n                    .map((item) => ({\n                    x: item.getX(),\n                    width: item.width,\n                    y: item.getY(),\n                    height: item.height\n                }));\n                const allPointsCoords = _.flatMap(allLinks.map((link) => link.getPoints())).map((item) => ({\n                    // points don't have width/height, so let's just use 0\n                    x: item.getX(),\n                    width: 0,\n                    y: item.getY(),\n                    height: 0\n                }));\n                const sumProps = (object, props) => _.reduce(props, (acc, prop) => acc + _.get(object, prop, 0), 0);\n                const canvas = this.engine.getCanvas();\n                const concatedCoords = _.concat(allNodesCoords, allPortsCoords, allPointsCoords);\n                const minX = Math.floor(Math.min(_.get(_.minBy(concatedCoords, 'x'), 'x', 0), 0) / this.ROUTING_SCALING_FACTOR) *\n                    this.ROUTING_SCALING_FACTOR;\n                const maxXElement = _.maxBy(concatedCoords, (item) => sumProps(item, ['x', 'width']));\n                const maxX = Math.max(sumProps(maxXElement, ['x', 'width']), canvas.offsetWidth);\n                const minYCoords = _.minBy(concatedCoords, 'y');\n                const minY = Math.floor(Math.min(_.get(minYCoords, 'y', 0), 0) / this.ROUTING_SCALING_FACTOR) * this.ROUTING_SCALING_FACTOR;\n                const maxYElement = _.maxBy(concatedCoords, (item) => sumProps(item, ['y', 'height']));\n                const maxY = Math.max(sumProps(maxYElement, ['y', 'height']), canvas.offsetHeight);\n                return {\n                    width: Math.ceil(Math.abs(minX) + maxX),\n                    hAdjustmentFactor: Math.abs(minX) / this.ROUTING_SCALING_FACTOR + 1,\n                    height: Math.ceil(Math.abs(minY) + maxY),\n                    vAdjustmentFactor: Math.abs(minY) / this.ROUTING_SCALING_FACTOR + 1\n                };\n            };\n            /**\n             * Updates (by reference) where nodes will be drawn on the matrix passed in.\n             */\n            this.markNodes = (matrix) => {\n                _.values(this.engine.getModel().getNodes()).forEach((node) => {\n                    const startX = Math.floor(node.getX() / this.ROUTING_SCALING_FACTOR);\n                    const endX = Math.ceil((node.getX() + node.width) / this.ROUTING_SCALING_FACTOR);\n                    const startY = Math.floor(node.getY() / this.ROUTING_SCALING_FACTOR);\n                    const endY = Math.ceil((node.getY() + node.height) / this.ROUTING_SCALING_FACTOR);\n                    for (let x = startX - 1; x <= endX + 1; x++) {\n                        for (let y = startY - 1; y < endY + 1; y++) {\n                            this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n                        }\n                    }\n                });\n            };\n            /**\n             * Updates (by reference) where ports will be drawn on the matrix passed in.\n             */\n            this.markPorts = (matrix) => {\n                const allElements = _.flatMap(_.values(this.engine.getModel().getLinks()).map((link) => [].concat(link.getSourcePort(), link.getTargetPort())));\n                allElements\n                    .filter((port) => port !== null)\n                    .forEach((port) => {\n                    const startX = Math.floor(port.x / this.ROUTING_SCALING_FACTOR);\n                    const endX = Math.ceil((port.x + port.width) / this.ROUTING_SCALING_FACTOR);\n                    const startY = Math.floor(port.y / this.ROUTING_SCALING_FACTOR);\n                    const endY = Math.ceil((port.y + port.height) / this.ROUTING_SCALING_FACTOR);\n                    for (let x = startX - 1; x <= endX + 1; x++) {\n                        for (let y = startY - 1; y < endY + 1; y++) {\n                            this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n                        }\n                    }\n                });\n            };\n            this.markMatrixPoint = (matrix, x, y) => {\n                if (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n                    matrix[y][x] = 1;\n                }\n            };\n        }\n        setDiagramEngine(engine) {\n            super.setDiagramEngine(engine);\n            // listen for drag changes\n            engine.getStateMachine().registerListener({\n                stateChanged: (event) => {\n                    if (event.newState instanceof react_canvas_core_1.AbstractDisplacementState) {\n                        const deRegister = engine.getActionEventBus().registerAction(new react_canvas_core_1.Action({\n                            type: react_canvas_core_1.InputType.MOUSE_UP,\n                            fire: () => {\n                                this.calculateRoutingMatrix();\n                                engine.repaintCanvas();\n                                deRegister();\n                            }\n                        }));\n                    }\n                }\n            });\n            this.listener = engine.registerListener({\n                canvasReady: () => {\n                    _.defer(() => {\n                        this.calculateRoutingMatrix();\n                        engine.repaintCanvas();\n                    });\n                }\n            });\n        }\n        setFactoryBank(bank) {\n            super.setFactoryBank(bank);\n            if (!bank && this.listener) {\n                this.listener.deregister();\n            }\n        }\n        generateReactWidget(event) {\n            return React.createElement(PathFindingLinkWidget_1.PathFindingLinkWidget, { diagramEngine: this.engine, link: event.model, factory: this });\n        }\n        generateModel(event) {\n            return new PathFindingLinkModel_1.PathFindingLinkModel();\n        }\n        /**\n         * A representation of the canvas in the following format:\n         *\n         * +-----------------+\n         * | 0 0 0 0 0 0 0 0 |\n         * | 0 0 0 0 0 0 0 0 |\n         * | 0 0 0 0 0 0 0 0 |\n         * | 0 0 0 0 0 0 0 0 |\n         * | 0 0 0 0 0 0 0 0 |\n         * +-----------------+\n         *\n         * In which all walkable points are marked by zeros.\n         * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n         */\n        getCanvasMatrix() {\n            if (this.canvasMatrix.length === 0) {\n                this.calculateCanvasMatrix();\n            }\n            return this.canvasMatrix;\n        }\n        calculateCanvasMatrix() {\n            const { width: canvasWidth, hAdjustmentFactor, height: canvasHeight, vAdjustmentFactor } = this.calculateMatrixDimensions();\n            this.hAdjustmentFactor = hAdjustmentFactor;\n            this.vAdjustmentFactor = vAdjustmentFactor;\n            const matrixWidth = Math.ceil(canvasWidth / this.ROUTING_SCALING_FACTOR);\n            const matrixHeight = Math.ceil(canvasHeight / this.ROUTING_SCALING_FACTOR);\n            this.canvasMatrix = _.range(0, matrixHeight).map(() => {\n                return new Array(matrixWidth).fill(0);\n            });\n        }\n        /**\n         * A representation of the canvas in the following format:\n         *\n         * +-----------------+\n         * | 0 0 1 1 0 0 0 0 |\n         * | 0 0 1 1 0 0 1 1 |\n         * | 0 0 0 0 0 0 1 1 |\n         * | 1 1 0 0 0 0 0 0 |\n         * | 1 1 0 0 0 0 0 0 |\n         * +-----------------+\n         *\n         * In which all points blocked by a node (and its ports) are\n         * marked as 1; points were there is nothing (ie, free) receive 0.\n         */\n        getRoutingMatrix() {\n            if (this.routingMatrix.length === 0) {\n                this.calculateRoutingMatrix();\n            }\n            return this.routingMatrix;\n        }\n        calculateRoutingMatrix() {\n            const matrix = _.cloneDeep(this.getCanvasMatrix());\n            // nodes need to be marked as blocked points\n            this.markNodes(matrix);\n            // same thing for ports\n            this.markPorts(matrix);\n            this.routingMatrix = matrix;\n        }\n        /**\n         * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n         * We use the functions below to translate back and forth between these coordinates, relying on the\n         * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n         */\n        translateRoutingX(x, reverse = false) {\n            return x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n        }\n        translateRoutingY(y, reverse = false) {\n            return y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n        }\n        generateDynamicPath(pathCoords) {\n            let path = Path();\n            path = path.moveto(pathCoords[0][0] * this.ROUTING_SCALING_FACTOR, pathCoords[0][1] * this.ROUTING_SCALING_FACTOR);\n            pathCoords.slice(1).forEach((coords) => {\n                path = path.lineto(coords[0] * this.ROUTING_SCALING_FACTOR, coords[1] * this.ROUTING_SCALING_FACTOR);\n            });\n            return path.print();\n        }\n    }\n    PathFindingLinkFactory.NAME = 'pathfinding';\n    return PathFindingLinkFactory;\n})();\nexports.PathFindingLinkFactory = PathFindingLinkFactory;\n"},"sourceMaps":{"js":{"version":3,"file":"PathFindingLinkFactory.js","sourceRoot":"","sources":["../../../src/link/PathFindingLinkFactory.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { PathFindingLinkModel } from './PathFindingLinkModel';\nimport { PathFindingLinkWidget } from './PathFindingLinkWidget';\nimport * as _ from 'lodash';\nimport * as Path from 'paths-js/path';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams-defaults';\nimport {\n\tAbstractDisplacementState,\n\tAbstractFactory,\n\tAction,\n\tFactoryBank,\n\tInputType,\n\tListenerHandle\n} from '@projectstorm/react-canvas-core';\n\nexport class PathFindingLinkFactory extends DefaultLinkFactory<PathFindingLinkModel> {\n\tROUTING_SCALING_FACTOR: number = 5;\n\n\t// calculated only when smart routing is active\n\tcanvasMatrix: number[][] = [];\n\troutingMatrix: number[][] = [];\n\n\t// used when at least one element has negative coordinates\n\thAdjustmentFactor: number = 0;\n\tvAdjustmentFactor: number = 0;\n\n\tstatic NAME = 'pathfinding';\n\tlistener: ListenerHandle;\n\n\tconstructor() {\n\t\tsuper(PathFindingLinkFactory.NAME);\n\t}\n\n\tsetDiagramEngine(engine: DiagramEngine): void {\n\t\tsuper.setDiagramEngine(engine);\n\n\t\t// listen for drag changes\n\t\tengine.getStateMachine().registerListener({\n\t\t\tstateChanged: (event) => {\n\t\t\t\tif (event.newState instanceof AbstractDisplacementState) {\n\t\t\t\t\tconst deRegister = engine.getActionEventBus().registerAction(\n\t\t\t\t\t\tnew Action<DiagramEngine>({\n\t\t\t\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\t\t\t\tfire: () => {\n\t\t\t\t\t\t\t\tthis.calculateRoutingMatrix();\n\t\t\t\t\t\t\t\tengine.repaintCanvas();\n\t\t\t\t\t\t\t\tdeRegister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.listener = engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\t_.defer(() => {\n\t\t\t\t\tthis.calculateRoutingMatrix();\n\t\t\t\t\tengine.repaintCanvas();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tsetFactoryBank(bank: FactoryBank<AbstractFactory>): void {\n\t\tsuper.setFactoryBank(bank);\n\t\tif (!bank && this.listener) {\n\t\t\tthis.listener.deregister();\n\t\t}\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <PathFindingLinkWidget diagramEngine={this.engine} link={event.model} factory={this} />;\n\t}\n\n\tgenerateModel(event): PathFindingLinkModel {\n\t\treturn new PathFindingLinkModel();\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all walkable points are marked by zeros.\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n\t */\n\tgetCanvasMatrix(): number[][] {\n\t\tif (this.canvasMatrix.length === 0) {\n\t\t\tthis.calculateCanvasMatrix();\n\t\t}\n\n\t\treturn this.canvasMatrix;\n\t}\n\tcalculateCanvasMatrix() {\n\t\tconst {\n\t\t\twidth: canvasWidth,\n\t\t\thAdjustmentFactor,\n\t\t\theight: canvasHeight,\n\t\t\tvAdjustmentFactor\n\t\t} = this.calculateMatrixDimensions();\n\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\n\n\t\tconst matrixWidth = Math.ceil(canvasWidth / this.ROUTING_SCALING_FACTOR);\n\t\tconst matrixHeight = Math.ceil(canvasHeight / this.ROUTING_SCALING_FACTOR);\n\n\t\tthis.canvasMatrix = _.range(0, matrixHeight).map(() => {\n\t\t\treturn new Array(matrixWidth).fill(0);\n\t\t});\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 1 1 0 0 0 0 |\n\t * | 0 0 1 1 0 0 1 1 |\n\t * | 0 0 0 0 0 0 1 1 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all points blocked by a node (and its ports) are\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\n\t */\n\tgetRoutingMatrix(): number[][] {\n\t\tif (this.routingMatrix.length === 0) {\n\t\t\tthis.calculateRoutingMatrix();\n\t\t}\n\n\t\treturn this.routingMatrix;\n\t}\n\tcalculateRoutingMatrix(): void {\n\t\tconst matrix = _.cloneDeep(this.getCanvasMatrix());\n\n\t\t// nodes need to be marked as blocked points\n\t\tthis.markNodes(matrix);\n\t\t// same thing for ports\n\t\tthis.markPorts(matrix);\n\n\t\tthis.routingMatrix = matrix;\n\t}\n\n\t/**\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n\t */\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\n\t/**\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n\t */\n\tcalculateMatrixDimensions = (): {\n\t\twidth: number;\n\t\thAdjustmentFactor: number;\n\t\theight: number;\n\t\tvAdjustmentFactor: number;\n\t} => {\n\t\tconst allNodesCoords = _.values(this.engine.getModel().getNodes()).map((item) => ({\n\t\t\tx: item.getX(),\n\t\t\twidth: item.width,\n\t\t\ty: item.getY(),\n\t\t\theight: item.height\n\t\t}));\n\n\t\tconst allLinks = _.values(this.engine.getModel().getLinks());\n\t\tconst allPortsCoords = _.flatMap(allLinks.map((link) => [link.getSourcePort(), link.getTargetPort()]))\n\t\t\t.filter((port) => port !== null)\n\t\t\t.map((item) => ({\n\t\t\t\tx: item.getX(),\n\t\t\t\twidth: item.width,\n\t\t\t\ty: item.getY(),\n\t\t\t\theight: item.height\n\t\t\t}));\n\t\tconst allPointsCoords = _.flatMap(allLinks.map((link) => link.getPoints())).map((item) => ({\n\t\t\t// points don't have width/height, so let's just use 0\n\t\t\tx: item.getX(),\n\t\t\twidth: 0,\n\t\t\ty: item.getY(),\n\t\t\theight: 0\n\t\t}));\n\n\t\tconst sumProps = (object, props) => _.reduce(props, (acc, prop) => acc + _.get(object, prop, 0), 0);\n\n\t\tconst canvas = this.engine.getCanvas() as HTMLDivElement;\n\t\tconst concatedCoords = _.concat(allNodesCoords, allPortsCoords, allPointsCoords);\n\t\tconst minX =\n\t\t\tMath.floor(Math.min(_.get(_.minBy(concatedCoords, 'x'), 'x', 0), 0) / this.ROUTING_SCALING_FACTOR) *\n\t\t\tthis.ROUTING_SCALING_FACTOR;\n\t\tconst maxXElement = _.maxBy(concatedCoords, (item) => sumProps(item, ['x', 'width']));\n\t\tconst maxX = Math.max(sumProps(maxXElement, ['x', 'width']), canvas.offsetWidth);\n\t\tconst minYCoords = _.minBy(concatedCoords, 'y');\n\t\tconst minY =\n\t\t\tMath.floor(Math.min(_.get(minYCoords, 'y', 0), 0) / this.ROUTING_SCALING_FACTOR) * this.ROUTING_SCALING_FACTOR;\n\t\tconst maxYElement = _.maxBy(concatedCoords, (item) => sumProps(item, ['y', 'height']));\n\t\tconst maxY = Math.max(sumProps(maxYElement, ['y', 'height']), canvas.offsetHeight);\n\n\t\treturn {\n\t\t\twidth: Math.ceil(Math.abs(minX) + maxX),\n\t\t\thAdjustmentFactor: Math.abs(minX) / this.ROUTING_SCALING_FACTOR + 1,\n\t\t\theight: Math.ceil(Math.abs(minY) + maxY),\n\t\t\tvAdjustmentFactor: Math.abs(minY) / this.ROUTING_SCALING_FACTOR + 1\n\t\t};\n\t};\n\n\t/**\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\n\t */\n\tmarkNodes = (matrix: number[][]): void => {\n\t\t_.values(this.engine.getModel().getNodes()).forEach((node) => {\n\t\t\tconst startX = Math.floor(node.getX() / this.ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((node.getX() + node.width) / this.ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(node.getY() / this.ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((node.getY() + node.height) / this.ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\n\t */\n\tmarkPorts = (matrix: number[][]): void => {\n\t\tconst allElements = _.flatMap(\n\t\t\t_.values(this.engine.getModel().getLinks()).map((link) => [].concat(link.getSourcePort(), link.getTargetPort()))\n\t\t);\n\t\tallElements\n\t\t\t.filter((port) => port !== null)\n\t\t\t.forEach((port) => {\n\t\t\t\tconst startX = Math.floor(port.x / this.ROUTING_SCALING_FACTOR);\n\t\t\t\tconst endX = Math.ceil((port.x + port.width) / this.ROUTING_SCALING_FACTOR);\n\t\t\t\tconst startY = Math.floor(port.y / this.ROUTING_SCALING_FACTOR);\n\t\t\t\tconst endY = Math.ceil((port.y + port.height) / this.ROUTING_SCALING_FACTOR);\n\n\t\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n\t\t\tmatrix[y][x] = 1;\n\t\t}\n\t};\n\n\tgenerateDynamicPath(pathCoords: number[][]) {\n\t\tlet path = Path();\n\t\tpath = path.moveto(pathCoords[0][0] * this.ROUTING_SCALING_FACTOR, pathCoords[0][1] * this.ROUTING_SCALING_FACTOR);\n\t\tpathCoords.slice(1).forEach((coords) => {\n\t\t\tpath = path.lineto(coords[0] * this.ROUTING_SCALING_FACTOR, coords[1] * this.ROUTING_SCALING_FACTOR);\n\t\t});\n\t\treturn path.print();\n\t}\n}\n"]}},"error":null,"hash":"1924eed7f4ea62a49ffc8a6327e9325d","cacheData":{"env":{}}}