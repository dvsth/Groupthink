{"id":"../node_modules/@projectstorm/react-diagrams-defaults/dist/es/node/DefaultNodeModel.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeModel.js.map","includedInParent":true,"mtime":1594481777940},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\node\\DefaultNodeModel.ts","includedInParent":true,"mtime":1594481777940},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\package.json","includedInParent":true,"mtime":1594481777940},{"name":"lodash","loc":{"line":4,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"},{"name":"@projectstorm/react-diagrams-core","loc":{"line":5,"column":38},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\index.js"},{"name":"../port/DefaultPortModel","loc":{"line":6,"column":35},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\port\\DefaultPortModel.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultNodeModel = void 0;\nconst _ = require(\"lodash\");\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst DefaultPortModel_1 = require(\"../port/DefaultPortModel\");\nclass DefaultNodeModel extends react_diagrams_core_1.NodeModel {\n    constructor(options = {}, color) {\n        if (typeof options === 'string') {\n            options = {\n                name: options,\n                color: color\n            };\n        }\n        super(Object.assign({ type: 'default', name: 'Untitled', color: 'rgb(0,192,255)' }, options));\n        this.portsOut = [];\n        this.portsIn = [];\n    }\n    doClone(lookupTable, clone) {\n        clone.portsIn = [];\n        clone.portsOut = [];\n        super.doClone(lookupTable, clone);\n    }\n    removePort(port) {\n        super.removePort(port);\n        if (port.getOptions().in) {\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\n        }\n        else {\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\n        }\n    }\n    addPort(port) {\n        super.addPort(port);\n        if (port.getOptions().in) {\n            if (this.portsIn.indexOf(port) === -1) {\n                this.portsIn.push(port);\n            }\n        }\n        else {\n            if (this.portsOut.indexOf(port) === -1) {\n                this.portsOut.push(port);\n            }\n        }\n        return port;\n    }\n    addInPort(label, after = true) {\n        const p = new DefaultPortModel_1.DefaultPortModel({\n            in: true,\n            name: label,\n            label: label,\n            alignment: react_diagrams_core_1.PortModelAlignment.LEFT\n        });\n        if (!after) {\n            this.portsIn.splice(0, 0, p);\n        }\n        return this.addPort(p);\n    }\n    addOutPort(label, after = true) {\n        const p = new DefaultPortModel_1.DefaultPortModel({\n            in: false,\n            name: label,\n            label: label,\n            alignment: react_diagrams_core_1.PortModelAlignment.RIGHT\n        });\n        if (!after) {\n            this.portsOut.splice(0, 0, p);\n        }\n        return this.addPort(p);\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.options.name = event.data.name;\n        this.options.color = event.data.color;\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\n            return this.getPortFromID(id);\n        });\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\n            return this.getPortFromID(id);\n        });\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { name: this.options.name, color: this.options.color, portsInOrder: _.map(this.portsIn, (port) => {\n                return port.getID();\n            }), portsOutOrder: _.map(this.portsOut, (port) => {\n                return port.getID();\n            }) });\n    }\n    getInPorts() {\n        return this.portsIn;\n    }\n    getOutPorts() {\n        return this.portsOut;\n    }\n}\nexports.DefaultNodeModel = DefaultNodeModel;\n"},"sourceMaps":{"js":{"version":3,"file":"DefaultNodeModel.js","sourceRoot":"","sources":["../../../src/node/DefaultNodeModel.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\nimport { DefaultPortModel } from '../port/DefaultPortModel';\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\n\tname?: string;\n\tcolor?: string;\n}\n\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\n\tOPTIONS: DefaultNodeModelOptions;\n}\n\nexport class DefaultNodeModel extends NodeModel<DefaultNodeModelGenerics> {\n\tprotected portsIn: DefaultPortModel[];\n\tprotected portsOut: DefaultPortModel[];\n\n\tconstructor(name: string, color: string);\n\tconstructor(options?: DefaultNodeModelOptions);\n\tconstructor(options: any = {}, color?: string) {\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\tname: options,\n\t\t\t\tcolor: color\n\t\t\t};\n\t\t}\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\tname: 'Untitled',\n\t\t\tcolor: 'rgb(0,192,255)',\n\t\t\t...options\n\t\t});\n\t\tthis.portsOut = [];\n\t\tthis.portsIn = [];\n\t}\n\n\tdoClone(lookupTable: {}, clone: any): void {\n\t\tclone.portsIn = [];\n\t\tclone.portsOut = [];\n\t\tsuper.doClone(lookupTable, clone);\n\t}\n\n\tremovePort(port: DefaultPortModel): void {\n\t\tsuper.removePort(port);\n\t\tif (port.getOptions().in) {\n\t\t\tthis.portsIn.splice(this.portsIn.indexOf(port), 1);\n\t\t} else {\n\t\t\tthis.portsOut.splice(this.portsOut.indexOf(port), 1);\n\t\t}\n\t}\n\n\taddPort<T extends DefaultPortModel>(port: T): T {\n\t\tsuper.addPort(port);\n\t\tif (port.getOptions().in) {\n\t\t\tif (this.portsIn.indexOf(port) === -1) {\n\t\t\t\tthis.portsIn.push(port);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.portsOut.indexOf(port) === -1) {\n\t\t\t\tthis.portsOut.push(port);\n\t\t\t}\n\t\t}\n\t\treturn port;\n\t}\n\n\taddInPort(label: string, after = true): DefaultPortModel {\n\t\tconst p = new DefaultPortModel({\n\t\t\tin: true,\n\t\t\tname: label,\n\t\t\tlabel: label,\n\t\t\talignment: PortModelAlignment.LEFT\n\t\t});\n\t\tif (!after) {\n\t\t\tthis.portsIn.splice(0, 0, p);\n\t\t}\n\t\treturn this.addPort(p);\n\t}\n\n\taddOutPort(label: string, after = true): DefaultPortModel {\n\t\tconst p = new DefaultPortModel({\n\t\t\tin: false,\n\t\t\tname: label,\n\t\t\tlabel: label,\n\t\t\talignment: PortModelAlignment.RIGHT\n\t\t});\n\t\tif (!after) {\n\t\t\tthis.portsOut.splice(0, 0, p);\n\t\t}\n\t\treturn this.addPort(p);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.color = event.data.color;\n\t\tthis.portsIn = _.map(event.data.portsInOrder, (id) => {\n\t\t\treturn this.getPortFromID(id);\n\t\t}) as DefaultPortModel[];\n\t\tthis.portsOut = _.map(event.data.portsOutOrder, (id) => {\n\t\t\treturn this.getPortFromID(id);\n\t\t}) as DefaultPortModel[];\n\t}\n\n\tserialize(): any {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\tcolor: this.options.color,\n\t\t\tportsInOrder: _.map(this.portsIn, (port) => {\n\t\t\t\treturn port.getID();\n\t\t\t}),\n\t\t\tportsOutOrder: _.map(this.portsOut, (port) => {\n\t\t\t\treturn port.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tgetInPorts(): DefaultPortModel[] {\n\t\treturn this.portsIn;\n\t}\n\n\tgetOutPorts(): DefaultPortModel[] {\n\t\treturn this.portsOut;\n\t}\n}\n"]}},"error":null,"hash":"9778863ae48a647bb7f50bb0f99c8f5a","cacheData":{"env":{}}}