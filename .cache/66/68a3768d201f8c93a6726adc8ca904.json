{"id":"../node_modules/dagre/lib/rank/feasible-tree.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\package.json","includedInParent":true,"mtime":1594481940992},{"name":"../lodash","loc":{"line":3,"column":16},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\feasible-tree.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\lodash.js"},{"name":"../graphlib","loc":{"line":4,"column":20},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\feasible-tree.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\graphlib.js"},{"name":"./util","loc":{"line":5,"column":20},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\feasible-tree.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\util.js"}],"generated":{"js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function(e) {\n      var edgeV = e.v,\n        w = (v === edgeV) ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function(v) {\n    g.node(v).rank += delta;\n  });\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/dagre/lib/rank/feasible-tree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}}],"sources":{"../node_modules/dagre/lib/rank/feasible-tree.js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function(e) {\n      var edgeV = e.v,\n        w = (v === edgeV) ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function(v) {\n    g.node(v).rank += delta;\n  });\n}\n"},"lineCount":90}},"error":null,"hash":"c593a0e96a8de5d4e3df319a7467ec01","cacheData":{"env":{}}}