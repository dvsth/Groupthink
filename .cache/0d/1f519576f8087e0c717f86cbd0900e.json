{"id":"../node_modules/@projectstorm/react-canvas-core/dist/es/core/FactoryBank.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core\\FactoryBank.js.map","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\src\\core\\FactoryBank.ts","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\package.json","includedInParent":true,"mtime":1594481777970},{"name":"./BaseObserver","loc":{"line":4,"column":31},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core\\FactoryBank.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core\\BaseObserver.js"},{"name":"lodash","loc":{"line":5,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core\\FactoryBank.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FactoryBank = void 0;\nconst BaseObserver_1 = require(\"./BaseObserver\");\nconst _ = require(\"lodash\");\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\nclass FactoryBank extends BaseObserver_1.BaseObserver {\n    constructor() {\n        super();\n        this.factories = {};\n    }\n    getFactories() {\n        return _.values(this.factories);\n    }\n    clearFactories() {\n        for (let factory in this.factories) {\n            this.deregisterFactory(factory);\n        }\n    }\n    getFactory(type) {\n        if (!this.factories[type]) {\n            throw new Error(`Cannot find factory with type [${type}]`);\n        }\n        return this.factories[type];\n    }\n    registerFactory(factory) {\n        factory.setFactoryBank(this);\n        this.factories[factory.getType()] = factory;\n        // todo fixme\n        this.fireEvent({ factory }, 'factoryAdded');\n    }\n    deregisterFactory(type) {\n        const factory = this.factories[type];\n        factory.setFactoryBank(null);\n        delete this.factories[type];\n        // todo fixme\n        this.fireEvent({ factory }, 'factoryRemoved');\n    }\n}\nexports.FactoryBank = FactoryBank;\n"},"sourceMaps":{"js":{"version":3,"file":"FactoryBank.js","sourceRoot":"","sources":["../../../src/core/FactoryBank.ts"],"names":[],"mappings":";;;AAAA,iDAAuE;AAEvE,4BAA4B;AAc5B;;GAEG;AACH,MAAa,WAGX,SAAQ,2BAAe;IAGxB;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,YAAY;QACX,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,cAAc;QACb,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE;YACnC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;SAChC;IACF,CAAC;IAED,UAAU,CAAkB,IAAY;QACvC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1B,MAAM,IAAI,KAAK,CAAC,kCAAkC,IAAI,GAAG,CAAC,CAAC;SAC3D;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAM,CAAC;IAClC,CAAC;IAED,eAAe,CAAC,OAAU;QACzB,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,OAAO,CAAC;QAC5C,aAAa;QACb,IAAI,CAAC,SAAS,CAAiB,EAAE,OAAO,EAAS,EAAE,cAAc,CAAC,CAAC;IACpE,CAAC;IAED,iBAAiB,CAAC,IAAY;QAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC5B,aAAa;QACb,IAAI,CAAC,SAAS,CAAmB,EAAE,OAAO,EAAS,EAAE,gBAAgB,CAAC,CAAC;IACxE,CAAC;CACD;AA1CD,kCA0CC","sourcesContent":["import { BaseEvent, BaseListener, BaseObserver } from './BaseObserver';\nimport { AbstractFactory } from './AbstractFactory';\nimport * as _ from 'lodash';\n\nexport interface FactoryBankListener<F extends AbstractFactory = AbstractFactory> extends BaseListener {\n\t/**\n\t * Factory as added to rhe bank\n\t */\n\tfactoryAdded?: (event: BaseEvent & { factory: F }) => any;\n\n\t/**\n\t * Factory was removed from the bank\n\t */\n\tfactoryRemoved?: (event: BaseEvent & { factory: F }) => any;\n}\n\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\nexport class FactoryBank<\n\tF extends AbstractFactory = AbstractFactory,\n\tL extends FactoryBankListener<F> = FactoryBankListener<F>\n> extends BaseObserver<L> {\n\tprotected factories: { [type: string]: F };\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.factories = {};\n\t}\n\n\tgetFactories(): F[] {\n\t\treturn _.values(this.factories);\n\t}\n\n\tclearFactories() {\n\t\tfor (let factory in this.factories) {\n\t\t\tthis.deregisterFactory(factory);\n\t\t}\n\t}\n\n\tgetFactory<T extends F = F>(type: string): T {\n\t\tif (!this.factories[type]) {\n\t\t\tthrow new Error(`Cannot find factory with type [${type}]`);\n\t\t}\n\t\treturn this.factories[type] as T;\n\t}\n\n\tregisterFactory(factory: F) {\n\t\tfactory.setFactoryBank(this);\n\t\tthis.factories[factory.getType()] = factory;\n\t\t// todo fixme\n\t\tthis.fireEvent<'factoryAdded'>({ factory } as any, 'factoryAdded');\n\t}\n\n\tderegisterFactory(type: string) {\n\t\tconst factory = this.factories[type];\n\t\tfactory.setFactoryBank(null);\n\t\tdelete this.factories[type];\n\t\t// todo fixme\n\t\tthis.fireEvent<'factoryRemoved'>({ factory } as any, 'factoryRemoved');\n\t}\n}\n"]}},"error":null,"hash":"a291cd6cc9247038e16498e1670d881d","cacheData":{"env":{}}}