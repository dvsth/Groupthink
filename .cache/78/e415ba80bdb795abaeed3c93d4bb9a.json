{"id":"../node_modules/@projectstorm/react-canvas-core/dist/es/core-actions/ActionEventBus.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-actions\\ActionEventBus.js.map","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-actions\\ActionEventBus.ts","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\package.json","includedInParent":true,"mtime":1594481777970},{"name":"./Action","loc":{"line":4,"column":25},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-actions\\ActionEventBus.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-actions\\Action.js"},{"name":"lodash","loc":{"line":5,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-actions\\ActionEventBus.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActionEventBus = void 0;\nconst Action_1 = require(\"./Action\");\nconst _ = require(\"lodash\");\nclass ActionEventBus {\n    constructor(engine) {\n        this.actions = {};\n        this.engine = engine;\n        this.keys = {};\n    }\n    getKeys() {\n        return _.keys(this.keys);\n    }\n    registerAction(action) {\n        action.setEngine(this.engine);\n        this.actions[action.id] = action;\n        return () => {\n            this.deregisterAction(action);\n        };\n    }\n    deregisterAction(action) {\n        action.setEngine(null);\n        delete this.actions[action.id];\n    }\n    getActionsForType(type) {\n        return _.filter(this.actions, (action) => {\n            return action.options.type === type;\n        });\n    }\n    getModelForEvent(actionEvent) {\n        if (actionEvent.model) {\n            return actionEvent.model;\n        }\n        return this.engine.getMouseElement(actionEvent.event);\n    }\n    getActionsForEvent(actionEvent) {\n        const { event } = actionEvent;\n        if (event.type === 'mousedown') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_DOWN);\n        }\n        else if (event.type === 'mouseup') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_UP);\n        }\n        else if (event.type === 'keydown') {\n            // store the recorded key\n            this.keys[event.key.toLowerCase()] = true;\n            return this.getActionsForType(Action_1.InputType.KEY_DOWN);\n        }\n        else if (event.type === 'keyup') {\n            // delete the recorded key\n            delete this.keys[event.key.toLowerCase()];\n            return this.getActionsForType(Action_1.InputType.KEY_UP);\n        }\n        else if (event.type === 'mousemove') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_MOVE);\n        }\n        else if (event.type === 'wheel') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_WHEEL);\n        }\n        return [];\n    }\n    fireAction(actionEvent) {\n        const actions = this.getActionsForEvent(actionEvent);\n        for (let action of actions) {\n            action.options.fire(actionEvent);\n        }\n    }\n}\nexports.ActionEventBus = ActionEventBus;\n"},"sourceMaps":{"js":{"version":3,"file":"ActionEventBus.js","sourceRoot":"","sources":["../../../src/core-actions/ActionEventBus.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, ActionEvent, InputType } from './Action';\nimport { KeyboardEvent, MouseEvent } from 'react';\nimport * as _ from 'lodash';\nimport { CanvasEngine } from '../CanvasEngine';\nimport { BaseModel } from '../core-models/BaseModel';\n\nexport class ActionEventBus {\n\tprotected actions: { [id: string]: Action };\n\tprotected engine: CanvasEngine;\n\tprotected keys: { [key: string]: boolean };\n\n\tconstructor(engine: CanvasEngine) {\n\t\tthis.actions = {};\n\t\tthis.engine = engine;\n\t\tthis.keys = {};\n\t}\n\n\tgetKeys(): string[] {\n\t\treturn _.keys(this.keys);\n\t}\n\n\tregisterAction(action: Action): () => void {\n\t\taction.setEngine(this.engine);\n\t\tthis.actions[action.id] = action;\n\t\treturn () => {\n\t\t\tthis.deregisterAction(action);\n\t\t};\n\t}\n\n\tderegisterAction(action: Action) {\n\t\taction.setEngine(null);\n\t\tdelete this.actions[action.id];\n\t}\n\n\tgetActionsForType(type: InputType): Action[] {\n\t\treturn _.filter(this.actions, (action) => {\n\t\t\treturn action.options.type === type;\n\t\t});\n\t}\n\n\tgetModelForEvent(actionEvent: ActionEvent<MouseEvent>): BaseModel {\n\t\tif (actionEvent.model) {\n\t\t\treturn actionEvent.model;\n\t\t}\n\t\treturn this.engine.getMouseElement(actionEvent.event);\n\t}\n\n\tgetActionsForEvent(actionEvent: ActionEvent): Action[] {\n\t\tconst { event } = actionEvent;\n\t\tif (event.type === 'mousedown') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_DOWN);\n\t\t} else if (event.type === 'mouseup') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_UP);\n\t\t} else if (event.type === 'keydown') {\n\t\t\t// store the recorded key\n\t\t\tthis.keys[(event as KeyboardEvent).key.toLowerCase()] = true;\n\t\t\treturn this.getActionsForType(InputType.KEY_DOWN);\n\t\t} else if (event.type === 'keyup') {\n\t\t\t// delete the recorded key\n\t\t\tdelete this.keys[(event as KeyboardEvent).key.toLowerCase()];\n\t\t\treturn this.getActionsForType(InputType.KEY_UP);\n\t\t} else if (event.type === 'mousemove') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_MOVE);\n\t\t} else if (event.type === 'wheel') {\n\t\t\treturn this.getActionsForType(InputType.MOUSE_WHEEL);\n\t\t}\n\t\treturn [];\n\t}\n\n\tfireAction(actionEvent: ActionEvent) {\n\t\tconst actions = this.getActionsForEvent(actionEvent);\n\t\tfor (let action of actions) {\n\t\t\taction.options.fire(actionEvent as any);\n\t\t}\n\t}\n}\n"]}},"error":null,"hash":"fd21e16fedcd4dd7825294c422dae8a5","cacheData":{"env":{}}}