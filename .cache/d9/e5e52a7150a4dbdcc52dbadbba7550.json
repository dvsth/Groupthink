{"id":"../node_modules/@projectstorm/react-diagrams-routing/dist/es/link/RightAngleLinkWidget.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\RightAngleLinkWidget.js.map","includedInParent":true,"mtime":1594481777960},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\src\\link\\RightAngleLinkWidget.tsx","includedInParent":true,"mtime":1594481777960},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\package.json","includedInParent":true,"mtime":1594481777960},{"name":"react","loc":{"line":4,"column":22},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\RightAngleLinkWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\react\\index.js"},{"name":"@projectstorm/react-diagrams-core","loc":{"line":5,"column":38},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\RightAngleLinkWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\index.js"},{"name":"@projectstorm/react-diagrams-defaults","loc":{"line":6,"column":42},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\RightAngleLinkWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\index.js"},{"name":"@projectstorm/geometry","loc":{"line":7,"column":27},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\link\\RightAngleLinkWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\geometry\\dist\\es\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RightAngleLinkWidget = void 0;\nconst React = require(\"react\");\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nlet RightAngleLinkWidget = /** @class */ (() => {\n    class RightAngleLinkWidget extends React.Component {\n        constructor(props) {\n            super(props);\n            this.handleMove = function (event) {\n                this.draggingEvent(event, this.dragging_index);\n            }.bind(this);\n            this.handleUp = function (event) {\n                // Unregister handlers to avoid multiple event handlers for other links\n                this.setState({ canDrag: false, selected: false });\n                window.removeEventListener('mousemove', this.handleMove);\n                window.removeEventListener('mouseup', this.handleUp);\n            }.bind(this);\n            this.refPaths = [];\n            this.state = {\n                selected: false,\n                canDrag: false\n            };\n            this.dragging_index = 0;\n        }\n        componentDidUpdate() {\n            this.props.link.setRenderedPaths(this.refPaths.map((ref) => {\n                return ref.current;\n            }));\n        }\n        componentDidMount() {\n            this.props.link.setRenderedPaths(this.refPaths.map((ref) => {\n                return ref.current;\n            }));\n        }\n        componentWillUnmount() {\n            this.props.link.setRenderedPaths([]);\n        }\n        generateLink(path, extraProps, id) {\n            const ref = React.createRef();\n            this.refPaths.push(ref);\n            return (React.createElement(react_diagrams_defaults_1.DefaultLinkSegmentWidget, { key: `link-${id}`, path: path, selected: this.state.selected, diagramEngine: this.props.diagramEngine, factory: this.props.diagramEngine.getFactoryForLink(this.props.link), link: this.props.link, forwardRef: ref, onSelection: (selected) => {\n                    this.setState({ selected: selected });\n                }, extras: extraProps }));\n        }\n        calculatePositions(points, event, index, coordinate) {\n            // If path is first or last add another point to keep node port on its position\n            if (index === 0) {\n                let point = new react_diagrams_core_1.PointModel({\n                    link: this.props.link,\n                    position: new geometry_1.Point(points[index].getX(), points[index].getY())\n                });\n                this.props.link.addPoint(point, index);\n                this.dragging_index++;\n                return;\n            }\n            else if (index === points.length - 2) {\n                let point = new react_diagrams_core_1.PointModel({\n                    link: this.props.link,\n                    position: new geometry_1.Point(points[index + 1].getX(), points[index + 1].getY())\n                });\n                this.props.link.addPoint(point, index + 1);\n                return;\n            }\n            // Merge two points if it is not close to node port and close to each other\n            if (index - 2 > 0) {\n                let _points = {\n                    [index - 2]: points[index - 2].getPosition(),\n                    [index + 1]: points[index + 1].getPosition(),\n                    [index - 1]: points[index - 1].getPosition()\n                };\n                if (Math.abs(_points[index - 1][coordinate] - _points[index + 1][coordinate]) < 5) {\n                    _points[index - 2][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    points[index - 2].setPosition(_points[index - 2]);\n                    points[index + 1].setPosition(_points[index + 1]);\n                    points[index - 1].remove();\n                    points[index - 1].remove();\n                    this.dragging_index--;\n                    this.dragging_index--;\n                    return;\n                }\n            }\n            // Merge two points if it is not close to node port\n            if (index + 2 < points.length - 2) {\n                let _points = {\n                    [index + 3]: points[index + 3].getPosition(),\n                    [index + 2]: points[index + 2].getPosition(),\n                    [index + 1]: points[index + 1].getPosition(),\n                    [index]: points[index].getPosition()\n                };\n                if (Math.abs(_points[index + 1][coordinate] - _points[index + 2][coordinate]) < 5) {\n                    _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    _points[index + 3][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    points[index].setPosition(_points[index]);\n                    points[index + 3].setPosition(_points[index + 3]);\n                    points[index + 1].remove();\n                    points[index + 1].remove();\n                    return;\n                }\n            }\n            // If no condition above handled then just update path points position\n            let _points = {\n                [index]: points[index].getPosition(),\n                [index + 1]: points[index + 1].getPosition()\n            };\n            _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n            _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n            points[index].setPosition(_points[index]);\n            points[index + 1].setPosition(_points[index + 1]);\n        }\n        draggingEvent(event, index) {\n            let points = this.props.link.getPoints();\n            // get moving difference. Index + 1 will work because links indexes has\n            // length = points.lenght - 1\n            let dx = Math.abs(points[index].getX() - points[index + 1].getX());\n            let dy = Math.abs(points[index].getY() - points[index + 1].getY());\n            // moving with y direction\n            if (dx === 0) {\n                this.calculatePositions(points, event, index, 'x');\n            }\n            else if (dy === 0) {\n                this.calculatePositions(points, event, index, 'y');\n            }\n            this.props.link.setFirstAndLastPathsDirection();\n        }\n        render() {\n            //ensure id is present for all points on the path\n            let points = this.props.link.getPoints();\n            let paths = [];\n            // Get points based on link orientation\n            let pointLeft = points[0];\n            let pointRight = points[points.length - 1];\n            let hadToSwitch = false;\n            if (pointLeft.getX() > pointRight.getX()) {\n                pointLeft = points[points.length - 1];\n                pointRight = points[0];\n                hadToSwitch = true;\n            }\n            let dy = Math.abs(points[0].getY() - points[points.length - 1].getY());\n            // When new link add one middle point to get everywhere 90Â° angle\n            if (this.props.link.getTargetPort() === null && points.length === 2) {\n                [...Array(2)].forEach((item) => {\n                    this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n                        link: this.props.link,\n                        position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n                    }), 1);\n                });\n                this.props.link.setManuallyFirstAndLastPathsDirection(true, true);\n            }\n            // When new link is moving and not connected to target port move with middle point\n            // TODO: @DanielLazarLDAPPS This will be better to update in DragNewLinkState\n            //  in function fireMouseMoved to avoid calling this unexpectedly e.g. after Deserialize\n            else if (this.props.link.getTargetPort() === null && this.props.link.getSourcePort() !== null) {\n                points[1].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointLeft.getY() : pointRight.getY());\n                points[2].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointRight.getY() : pointLeft.getY());\n            }\n            // Render was called but link is not moved but user.\n            // Node is moved and in this case fix coordinates to get 90Â° angle.\n            // For loop just for first and last path\n            else if (!this.state.canDrag && points.length > 2) {\n                // Those points and its position only will be moved\n                for (let i = 1; i < points.length; i += points.length - 2) {\n                    if (i - 1 === 0) {\n                        if (this.props.link.getFirstPathXdirection()) {\n                            points[i].setPosition(points[i].getX(), points[i - 1].getY());\n                        }\n                        else {\n                            points[i].setPosition(points[i - 1].getX(), points[i].getY());\n                        }\n                    }\n                    else {\n                        if (this.props.link.getLastPathXdirection()) {\n                            points[i - 1].setPosition(points[i - 1].getX(), points[i].getY());\n                        }\n                        else {\n                            points[i - 1].setPosition(points[i].getX(), points[i - 1].getY());\n                        }\n                    }\n                }\n            }\n            // If there is existing link which has two points add one\n            // NOTE: It doesn't matter if check is for dy or dx\n            if (points.length === 2 && dy !== 0 && !this.state.canDrag) {\n                this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n                    link: this.props.link,\n                    position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n                }));\n            }\n            for (let j = 0; j < points.length - 1; j++) {\n                paths.push(this.generateLink(react_diagrams_core_1.LinkWidget.generateLinePath(points[j], points[j + 1]), {\n                    'data-linkid': this.props.link.getID(),\n                    'data-point': j,\n                    onMouseDown: (event) => {\n                        if (event.button === 0) {\n                            this.setState({ canDrag: true });\n                            this.dragging_index = j;\n                            // Register mouse move event to track mouse position\n                            // On mouse up these events are unregistered check \"this.handleUp\"\n                            window.addEventListener('mousemove', this.handleMove);\n                            window.addEventListener('mouseup', this.handleUp);\n                        }\n                    },\n                    onMouseEnter: (event) => {\n                        this.setState({ selected: true });\n                        this.props.link.lastHoverIndexOfPath = j;\n                    }\n                }, j));\n            }\n            this.refPaths = [];\n            return React.createElement(\"g\", { \"data-default-link-test\": this.props.link.getOptions().testName }, paths);\n        }\n    }\n    RightAngleLinkWidget.defaultProps = {\n        color: 'red',\n        width: 3,\n        link: null,\n        smooth: false,\n        diagramEngine: null,\n        factory: null\n    };\n    return RightAngleLinkWidget;\n})();\nexports.RightAngleLinkWidget = RightAngleLinkWidget;\n"},"sourceMaps":{"js":{"version":3,"file":"RightAngleLinkWidget.js","sourceRoot":"","sources":["../../../src/link/RightAngleLinkWidget.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DiagramEngine, LinkWidget, PointModel } from '@projectstorm/react-diagrams-core';\nimport { RightAngleLinkFactory } from './RightAngleLinkFactory';\nimport { DefaultLinkModel, DefaultLinkSegmentWidget } from '@projectstorm/react-diagrams-defaults';\nimport { Point } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport { RightAngleLinkModel } from './RightAngleLinkModel';\n\nexport interface RightAngleLinkProps {\n\tcolor?: string;\n\twidth?: number;\n\tsmooth?: boolean;\n\tlink: RightAngleLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tfactory: RightAngleLinkFactory;\n}\n\nexport interface RightAngleLinkState {\n\tselected: boolean;\n\tcanDrag: boolean;\n}\n\nexport class RightAngleLinkWidget extends React.Component<RightAngleLinkProps, RightAngleLinkState> {\n\tpublic static defaultProps: RightAngleLinkProps = {\n\t\tcolor: 'red',\n\t\twidth: 3,\n\t\tlink: null,\n\t\tsmooth: false,\n\t\tdiagramEngine: null,\n\t\tfactory: null\n\t};\n\n\trefPaths: React.RefObject<SVGPathElement>[];\n\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\n\trefLabels: { [id: string]: HTMLElement };\n\tdragging_index: number;\n\n\tconstructor(props: RightAngleLinkProps) {\n\t\tsuper(props);\n\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false,\n\t\t\tcanDrag: false\n\t\t};\n\n\t\tthis.dragging_index = 0;\n\t}\n\n\tcomponentDidUpdate(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.props.link.setRenderedPaths([]);\n\t}\n\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\n\t\tconst ref = React.createRef<SVGPathElement>();\n\t\tthis.refPaths.push(ref);\n\t\treturn (\n\t\t\t<DefaultLinkSegmentWidget\n\t\t\t\tkey={`link-${id}`}\n\t\t\t\tpath={path}\n\t\t\t\tselected={this.state.selected}\n\t\t\t\tdiagramEngine={this.props.diagramEngine}\n\t\t\t\tfactory={this.props.diagramEngine.getFactoryForLink(this.props.link)}\n\t\t\t\tlink={this.props.link}\n\t\t\t\tforwardRef={ref}\n\t\t\t\tonSelection={(selected) => {\n\t\t\t\t\tthis.setState({ selected: selected });\n\t\t\t\t}}\n\t\t\t\textras={extraProps}\n\t\t\t/>\n\t\t);\n\t}\n\n\tcalculatePositions(points: PointModel[], event: MouseEvent, index: number, coordinate: string) {\n\t\t// If path is first or last add another point to keep node port on its position\n\t\tif (index === 0) {\n\t\t\tlet point = new PointModel({\n\t\t\t\tlink: this.props.link,\n\t\t\t\tposition: new Point(points[index].getX(), points[index].getY())\n\t\t\t});\n\t\t\tthis.props.link.addPoint(point, index);\n\t\t\tthis.dragging_index++;\n\t\t\treturn;\n\t\t} else if (index === points.length - 2) {\n\t\t\tlet point = new PointModel({\n\t\t\t\tlink: this.props.link,\n\t\t\t\tposition: new Point(points[index + 1].getX(), points[index + 1].getY())\n\t\t\t});\n\t\t\tthis.props.link.addPoint(point, index + 1);\n\t\t\treturn;\n\t\t}\n\n\t\t// Merge two points if it is not close to node port and close to each other\n\t\tif (index - 2 > 0) {\n\t\t\tlet _points = {\n\t\t\t\t[index - 2]: points[index - 2].getPosition(),\n\t\t\t\t[index + 1]: points[index + 1].getPosition(),\n\t\t\t\t[index - 1]: points[index - 1].getPosition()\n\t\t\t};\n\t\t\tif (Math.abs(_points[index - 1][coordinate] - _points[index + 1][coordinate]) < 5) {\n\t\t\t\t_points[index - 2][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\t_points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\tpoints[index - 2].setPosition(_points[index - 2]);\n\t\t\t\tpoints[index + 1].setPosition(_points[index + 1]);\n\t\t\t\tpoints[index - 1].remove();\n\t\t\t\tpoints[index - 1].remove();\n\t\t\t\tthis.dragging_index--;\n\t\t\t\tthis.dragging_index--;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Merge two points if it is not close to node port\n\t\tif (index + 2 < points.length - 2) {\n\t\t\tlet _points = {\n\t\t\t\t[index + 3]: points[index + 3].getPosition(),\n\t\t\t\t[index + 2]: points[index + 2].getPosition(),\n\t\t\t\t[index + 1]: points[index + 1].getPosition(),\n\t\t\t\t[index]: points[index].getPosition()\n\t\t\t};\n\t\t\tif (Math.abs(_points[index + 1][coordinate] - _points[index + 2][coordinate]) < 5) {\n\t\t\t\t_points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\t_points[index + 3][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\tpoints[index].setPosition(_points[index]);\n\t\t\t\tpoints[index + 3].setPosition(_points[index + 3]);\n\t\t\t\tpoints[index + 1].remove();\n\t\t\t\tpoints[index + 1].remove();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If no condition above handled then just update path points position\n\t\tlet _points = {\n\t\t\t[index]: points[index].getPosition(),\n\t\t\t[index + 1]: points[index + 1].getPosition()\n\t\t};\n\t\t_points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t_points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\tpoints[index].setPosition(_points[index]);\n\t\tpoints[index + 1].setPosition(_points[index + 1]);\n\t}\n\n\tdraggingEvent(event: MouseEvent, index: number) {\n\t\tlet points = this.props.link.getPoints();\n\t\t// get moving difference. Index + 1 will work because links indexes has\n\t\t// length = points.lenght - 1\n\t\tlet dx = Math.abs(points[index].getX() - points[index + 1].getX());\n\t\tlet dy = Math.abs(points[index].getY() - points[index + 1].getY());\n\n\t\t// moving with y direction\n\t\tif (dx === 0) {\n\t\t\tthis.calculatePositions(points, event, index, 'x');\n\t\t} else if (dy === 0) {\n\t\t\tthis.calculatePositions(points, event, index, 'y');\n\t\t}\n\t\tthis.props.link.setFirstAndLastPathsDirection();\n\t}\n\n\thandleMove = function (event: MouseEvent) {\n\t\tthis.draggingEvent(event, this.dragging_index);\n\t}.bind(this);\n\n\thandleUp = function (event: MouseEvent) {\n\t\t// Unregister handlers to avoid multiple event handlers for other links\n\t\tthis.setState({ canDrag: false, selected: false });\n\t\twindow.removeEventListener('mousemove', this.handleMove);\n\t\twindow.removeEventListener('mouseup', this.handleUp);\n\t}.bind(this);\n\n\trender() {\n\t\t//ensure id is present for all points on the path\n\t\tlet points = this.props.link.getPoints();\n\t\tlet paths = [];\n\n\t\t// Get points based on link orientation\n\t\tlet pointLeft = points[0];\n\t\tlet pointRight = points[points.length - 1];\n\t\tlet hadToSwitch = false;\n\t\tif (pointLeft.getX() > pointRight.getX()) {\n\t\t\tpointLeft = points[points.length - 1];\n\t\t\tpointRight = points[0];\n\t\t\thadToSwitch = true;\n\t\t}\n\t\tlet dy = Math.abs(points[0].getY() - points[points.length - 1].getY());\n\n\t\t// When new link add one middle point to get everywhere 90Â° angle\n\t\tif (this.props.link.getTargetPort() === null && points.length === 2) {\n\t\t\t[...Array(2)].forEach((item) => {\n\t\t\t\tthis.props.link.addPoint(\n\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\tlink: this.props.link,\n\t\t\t\t\t\tposition: new Point(pointLeft.getX(), pointRight.getY())\n\t\t\t\t\t}),\n\t\t\t\t\t1\n\t\t\t\t);\n\t\t\t});\n\t\t\tthis.props.link.setManuallyFirstAndLastPathsDirection(true, true);\n\t\t}\n\t\t// When new link is moving and not connected to target port move with middle point\n\t\t// TODO: @DanielLazarLDAPPS This will be better to update in DragNewLinkState\n\t\t//  in function fireMouseMoved to avoid calling this unexpectedly e.g. after Deserialize\n\t\telse if (this.props.link.getTargetPort() === null && this.props.link.getSourcePort() !== null) {\n\t\t\tpoints[1].setPosition(\n\t\t\t\tpointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2,\n\t\t\t\t!hadToSwitch ? pointLeft.getY() : pointRight.getY()\n\t\t\t);\n\t\t\tpoints[2].setPosition(\n\t\t\t\tpointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2,\n\t\t\t\t!hadToSwitch ? pointRight.getY() : pointLeft.getY()\n\t\t\t);\n\t\t}\n\t\t// Render was called but link is not moved but user.\n\t\t// Node is moved and in this case fix coordinates to get 90Â° angle.\n\t\t// For loop just for first and last path\n\t\telse if (!this.state.canDrag && points.length > 2) {\n\t\t\t// Those points and its position only will be moved\n\t\t\tfor (let i = 1; i < points.length; i += points.length - 2) {\n\t\t\t\tif (i - 1 === 0) {\n\t\t\t\t\tif (this.props.link.getFirstPathXdirection()) {\n\t\t\t\t\t\tpoints[i].setPosition(points[i].getX(), points[i - 1].getY());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpoints[i].setPosition(points[i - 1].getX(), points[i].getY());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.props.link.getLastPathXdirection()) {\n\t\t\t\t\t\tpoints[i - 1].setPosition(points[i - 1].getX(), points[i].getY());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpoints[i - 1].setPosition(points[i].getX(), points[i - 1].getY());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If there is existing link which has two points add one\n\t\t// NOTE: It doesn't matter if check is for dy or dx\n\t\tif (points.length === 2 && dy !== 0 && !this.state.canDrag) {\n\t\t\tthis.props.link.addPoint(\n\t\t\t\tnew PointModel({\n\t\t\t\t\tlink: this.props.link,\n\t\t\t\t\tposition: new Point(pointLeft.getX(), pointRight.getY())\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\tpaths.push(\n\t\t\t\tthis.generateLink(\n\t\t\t\t\tLinkWidget.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t{\n\t\t\t\t\t\t'data-linkid': this.props.link.getID(),\n\t\t\t\t\t\t'data-point': j,\n\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\tif (event.button === 0) {\n\t\t\t\t\t\t\t\tthis.setState({ canDrag: true });\n\t\t\t\t\t\t\t\tthis.dragging_index = j;\n\t\t\t\t\t\t\t\t// Register mouse move event to track mouse position\n\t\t\t\t\t\t\t\t// On mouse up these events are unregistered check \"this.handleUp\"\n\t\t\t\t\t\t\t\twindow.addEventListener('mousemove', this.handleMove);\n\t\t\t\t\t\t\t\twindow.addEventListener('mouseup', this.handleUp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonMouseEnter: (event: MouseEvent) => {\n\t\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t\t\tthis.props.link.lastHoverIndexOfPath = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tj\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tthis.refPaths = [];\n\t\treturn <g data-default-link-test={this.props.link.getOptions().testName}>{paths}</g>;\n\t}\n}\n"]}},"error":null,"hash":"ff5ffeab24c315fb6420b3ff09b73cd9","cacheData":{"env":{}}}