{"id":"../node_modules/@projectstorm/react-diagrams-core/dist/es/states/DragNewLinkState.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\states\\DragNewLinkState.js.map","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\src\\states\\DragNewLinkState.ts","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\package.json","includedInParent":true,"mtime":1594481777956},{"name":"@projectstorm/react-canvas-core","loc":{"line":4,"column":36},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\states\\DragNewLinkState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\index.js"},{"name":"../entities/port/PortModel","loc":{"line":5,"column":28},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\states\\DragNewLinkState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\port\\PortModel.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DragNewLinkState = void 0;\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst PortModel_1 = require(\"../entities/port/PortModel\");\nclass DragNewLinkState extends react_canvas_core_1.AbstractDisplacementState {\n    constructor(options = {}) {\n        super({ name: 'drag-new-link' });\n        this.config = Object.assign({ allowLooseLinks: true, allowLinksFromLockedPorts: false }, options);\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_DOWN,\n            fire: (event) => {\n                this.port = this.engine.getMouseElement(event.event);\n                if (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n                    this.eject();\n                    return;\n                }\n                this.link = this.port.createLinkModel();\n                // if no link is given, just eject the state\n                if (!this.link) {\n                    this.eject();\n                    return;\n                }\n                this.link.setSelected(true);\n                this.link.setSourcePort(this.port);\n                this.engine.getModel().addLink(this.link);\n                this.port.reportPosition();\n            }\n        }));\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_UP,\n            fire: (event) => {\n                const model = this.engine.getMouseElement(event.event);\n                // check to see if we connected to a new port\n                if (model instanceof PortModel_1.PortModel) {\n                    if (this.port.canLinkToPort(model)) {\n                        this.link.setTargetPort(model);\n                        model.reportPosition();\n                        this.engine.repaintCanvas();\n                        return;\n                    }\n                    else {\n                        this.link.remove();\n                        this.engine.repaintCanvas();\n                        return;\n                    }\n                }\n                if (!this.config.allowLooseLinks) {\n                    this.link.remove();\n                    this.engine.repaintCanvas();\n                }\n            }\n        }));\n    }\n    /**\n     * Calculates the link's far-end point position on mouse move.\n     * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n     * as the possible engine offset\n     */\n    fireMouseMoved(event) {\n        const portPos = this.port.getPosition();\n        const zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n        const engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n        const engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n        const initialXRelative = this.initialXRelative / zoomLevelPercentage;\n        const initialYRelative = this.initialYRelative / zoomLevelPercentage;\n        const linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n        const linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n        this.link.getLastPoint().setPosition(linkNextX, linkNextY);\n        this.engine.repaintCanvas();\n    }\n}\nexports.DragNewLinkState = DragNewLinkState;\n"},"sourceMaps":{"js":{"version":3,"file":"DragNewLinkState.js","sourceRoot":"","sources":["../../../src/states/DragNewLinkState.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tAbstractDisplacementState,\n\tAbstractDisplacementStateEvent,\n\tAction,\n\tActionEvent,\n\tInputType\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { DiagramEngine } from '../DiagramEngine';\n\nexport interface DragNewLinkStateOptions {\n\t/**\n\t * If enabled, the links will stay on the canvas if they dont connect to a port\n\t * when dragging finishes\n\t */\n\tallowLooseLinks?: boolean;\n\t/**\n\t * If enabled, then a link can still be drawn from the port even if it is locked\n\t */\n\tallowLinksFromLockedPorts?: boolean;\n}\n\nexport class DragNewLinkState extends AbstractDisplacementState<DiagramEngine> {\n\tport: PortModel;\n\tlink: LinkModel;\n\tconfig: DragNewLinkStateOptions;\n\n\tconstructor(options: DragNewLinkStateOptions = {}) {\n\t\tsuper({ name: 'drag-new-link' });\n\n\t\tthis.config = {\n\t\t\tallowLooseLinks: true,\n\t\t\tallowLinksFromLockedPorts: false,\n\t\t\t...options\n\t\t};\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent, PortModel>) => {\n\t\t\t\t\tthis.port = this.engine.getMouseElement(event.event) as PortModel;\n\t\t\t\t\tif (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link = this.port.createLinkModel();\n\n\t\t\t\t\t// if no link is given, just eject the state\n\t\t\t\t\tif (!this.link) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link.setSelected(true);\n\t\t\t\t\tthis.link.setSourcePort(this.port);\n\t\t\t\t\tthis.engine.getModel().addLink(this.link);\n\t\t\t\t\tthis.port.reportPosition();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst model = this.engine.getMouseElement(event.event);\n\t\t\t\t\t// check to see if we connected to a new port\n\t\t\t\t\tif (model instanceof PortModel) {\n\t\t\t\t\t\tif (this.port.canLinkToPort(model)) {\n\t\t\t\t\t\t\tthis.link.setTargetPort(model);\n\t\t\t\t\t\t\tmodel.reportPosition();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.config.allowLooseLinks) {\n\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the link's far-end point position on mouse move.\n\t * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n\t * as the possible engine offset\n\t */\n\tfireMouseMoved(event: AbstractDisplacementStateEvent): any {\n\t\tconst portPos = this.port.getPosition();\n\t\tconst zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n\t\tconst engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n\t\tconst engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n\t\tconst initialXRelative = this.initialXRelative / zoomLevelPercentage;\n\t\tconst initialYRelative = this.initialYRelative / zoomLevelPercentage;\n\t\tconst linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n\t\tconst linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n\n\t\tthis.link.getLastPoint().setPosition(linkNextX, linkNextY);\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n"]}},"error":null,"hash":"2c9f586b321639b7adcb600a19fe8a30","cacheData":{"env":{}}}