{"id":"../node_modules/@projectstorm/react-canvas-core/dist/es/states/DefaultState.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DefaultState.js.map","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\src\\states\\DefaultState.ts","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\package.json","includedInParent":true,"mtime":1594481777970},{"name":"../core-state/State","loc":{"line":4,"column":24},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DefaultState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-state\\State.js"},{"name":"../core-actions/Action","loc":{"line":5,"column":25},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DefaultState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-actions\\Action.js"},{"name":"./DragCanvasState","loc":{"line":6,"column":34},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DefaultState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DragCanvasState.js"},{"name":"./SelectingState","loc":{"line":7,"column":33},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DefaultState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\SelectingState.js"},{"name":"./MoveItemsState","loc":{"line":8,"column":33},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\DefaultState.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\states\\MoveItemsState.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultState = void 0;\nconst State_1 = require(\"../core-state/State\");\nconst Action_1 = require(\"../core-actions/Action\");\nconst DragCanvasState_1 = require(\"./DragCanvasState\");\nconst SelectingState_1 = require(\"./SelectingState\");\nconst MoveItemsState_1 = require(\"./MoveItemsState\");\nclass DefaultState extends State_1.State {\n    constructor() {\n        super({\n            name: 'default'\n        });\n        this.childStates = [new SelectingState_1.SelectingState()];\n        // determine what was clicked on\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_DOWN,\n            fire: (event) => {\n                const element = this.engine.getActionEventBus().getModelForEvent(event);\n                // the canvas was clicked on, transition to the dragging canvas state\n                if (!element) {\n                    this.transitionWithEvent(new DragCanvasState_1.DragCanvasState(), event);\n                }\n                else {\n                    this.transitionWithEvent(new MoveItemsState_1.MoveItemsState(), event);\n                }\n            }\n        }));\n    }\n}\nexports.DefaultState = DefaultState;\n"},"sourceMaps":{"js":{"version":3,"file":"DefaultState.js","sourceRoot":"","sources":["../../../src/states/DefaultState.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,mDAAwE;AAExE,uDAAoD;AACpD,qDAAkD;AAClD,qDAAkD;AAElD,MAAa,YAAa,SAAQ,aAAK;IACtC;QACC,KAAK,CAAC;YACL,IAAI,EAAE,SAAS;SACf,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,+BAAc,EAAE,CAAC,CAAC;QAE1C,gCAAgC;QAChC,IAAI,CAAC,cAAc,CAClB,IAAI,eAAM,CAAC;YACV,IAAI,EAAE,kBAAS,CAAC,UAAU;YAC1B,IAAI,EAAE,CAAC,KAA8B,EAAE,EAAE;gBACxC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAExE,qEAAqE;gBACrE,IAAI,CAAC,OAAO,EAAE;oBACb,IAAI,CAAC,mBAAmB,CAAC,IAAI,iCAAe,EAAE,EAAE,KAAK,CAAC,CAAC;iBACvD;qBAAM;oBACN,IAAI,CAAC,mBAAmB,CAAC,IAAI,+BAAc,EAAE,EAAE,KAAK,CAAC,CAAC;iBACtD;YACF,CAAC;SACD,CAAC,CACF,CAAC;IACH,CAAC;CACD;AAxBD,oCAwBC","sourcesContent":["import { State } from '../core-state/State';\nimport { Action, ActionEvent, InputType } from '../core-actions/Action';\nimport { MouseEvent } from 'react';\nimport { DragCanvasState } from './DragCanvasState';\nimport { SelectingState } from './SelectingState';\nimport { MoveItemsState } from './MoveItemsState';\n\nexport class DefaultState extends State {\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(new DragCanvasState(), event);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.transitionWithEvent(new MoveItemsState(), event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"]}},"error":null,"hash":"d36369ef08a10f5b65b91f2469de4a41","cacheData":{"env":{}}}