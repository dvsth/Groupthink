{"id":"../node_modules/@projectstorm/react-diagrams-routing/dist/es/dagre/DagreEngine.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\dagre\\DagreEngine.js.map","includedInParent":true,"mtime":1594481777960},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\src\\dagre\\DagreEngine.ts","includedInParent":true,"mtime":1594481777960},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\package.json","includedInParent":true,"mtime":1594481777960},{"name":"@projectstorm/react-diagrams-core","loc":{"line":4,"column":38},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\dagre\\DagreEngine.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\index.js"},{"name":"dagre","loc":{"line":5,"column":22},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\dagre\\DagreEngine.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\index.js"},{"name":"lodash","loc":{"line":6,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\dagre\\DagreEngine.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"},{"name":"@projectstorm/geometry","loc":{"line":7,"column":27},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-routing\\dist\\es\\dagre\\DagreEngine.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\geometry\\dist\\es\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DagreEngine = void 0;\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst dagre = require(\"dagre\");\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nclass DagreEngine {\n    constructor(options = {}) {\n        this.options = options;\n    }\n    redistribute(model) {\n        // Create a new directed graph\n        var g = new dagre.graphlib.Graph({\n            multigraph: true\n        });\n        g.setGraph(this.options.graph || {});\n        g.setDefaultEdgeLabel(function () {\n            return {};\n        });\n        const processedlinks = {};\n        // set nodes\n        _.forEach(model.getNodes(), (node) => {\n            g.setNode(node.getID(), { width: node.width, height: node.height });\n        });\n        _.forEach(model.getLinks(), (link) => {\n            // set edges\n            if (link.getSourcePort() && link.getTargetPort()) {\n                processedlinks[link.getID()] = true;\n                g.setEdge({\n                    v: link.getSourcePort().getNode().getID(),\n                    w: link.getTargetPort().getNode().getID(),\n                    name: link.getID()\n                });\n            }\n        });\n        // layout the graph\n        dagre.layout(g);\n        g.nodes().forEach((v) => {\n            const node = g.node(v);\n            model.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n        });\n        // also include links?\n        if (this.options.includeLinks) {\n            g.edges().forEach((e) => {\n                const edge = g.edge(e);\n                const link = model.getLink(e.name);\n                const points = [link.getFirstPoint()];\n                for (let i = 1; i < edge.points.length - 2; i++) {\n                    points.push(new react_diagrams_core_1.PointModel({ link: link, position: new geometry_1.Point(edge.points[i].x, edge.points[i].y) }));\n                }\n                link.setPoints(points.concat(link.getLastPoint()));\n            });\n        }\n    }\n}\nexports.DagreEngine = DagreEngine;\n"},"sourceMaps":{"js":{"version":3,"file":"DagreEngine.js","sourceRoot":"","sources":["../../../src/dagre/DagreEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { DiagramModel, PointModel } from '@projectstorm/react-diagrams-core';\nimport * as dagre from 'dagre';\nimport * as _ from 'lodash';\nimport { GraphLabel } from 'dagre';\nimport { Point } from '@projectstorm/geometry';\n\nexport interface DagreEngineOptions {\n\tgraph?: GraphLabel;\n\t/**\n\t * Will also layout links\n\t */\n\tincludeLinks?: boolean;\n}\n\nexport class DagreEngine {\n\toptions: DagreEngineOptions;\n\n\tconstructor(options: DagreEngineOptions = {}) {\n\t\tthis.options = options;\n\t}\n\n\tredistribute(model: DiagramModel) {\n\t\t// Create a new directed graph\n\t\tvar g = new dagre.graphlib.Graph({\n\t\t\tmultigraph: true\n\t\t});\n\t\tg.setGraph(this.options.graph || {});\n\t\tg.setDefaultEdgeLabel(function () {\n\t\t\treturn {};\n\t\t});\n\n\t\tconst processedlinks: { [id: string]: boolean } = {};\n\n\t\t// set nodes\n\t\t_.forEach(model.getNodes(), (node) => {\n\t\t\tg.setNode(node.getID(), { width: node.width, height: node.height });\n\t\t});\n\n\t\t_.forEach(model.getLinks(), (link) => {\n\t\t\t// set edges\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tprocessedlinks[link.getID()] = true;\n\t\t\t\tg.setEdge({\n\t\t\t\t\tv: link.getSourcePort().getNode().getID(),\n\t\t\t\t\tw: link.getTargetPort().getNode().getID(),\n\t\t\t\t\tname: link.getID()\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// layout the graph\n\t\tdagre.layout(g);\n\n\t\tg.nodes().forEach((v) => {\n\t\t\tconst node = g.node(v);\n\t\t\tmodel.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n\t\t});\n\n\t\t// also include links?\n\t\tif (this.options.includeLinks) {\n\t\t\tg.edges().forEach((e) => {\n\t\t\t\tconst edge = g.edge(e);\n\t\t\t\tconst link = model.getLink(e.name);\n\n\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\tfor (let i = 1; i < edge.points.length - 2; i++) {\n\t\t\t\t\tpoints.push(new PointModel({ link: link, position: new Point(edge.points[i].x, edge.points[i].y) }));\n\t\t\t\t}\n\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t});\n\t\t}\n\t}\n}\n"]}},"error":null,"hash":"4d6612601690ffddcfafa81273412fb6","cacheData":{"env":{}}}