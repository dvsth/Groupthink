{"id":"../node_modules/graphlib/lib/alg/dijkstra.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\graphlib\\package.json","includedInParent":true,"mtime":1594481940010},{"name":"../lodash","loc":{"line":1,"column":16},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\graphlib\\lib\\alg\\dijkstra.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\graphlib\\lib\\lodash.js"},{"name":"../data/priority-queue","loc":{"line":2,"column":28},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\graphlib\\lib\\alg\\dijkstra.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\graphlib\\lib\\data\\priority-queue.js"}],"generated":{"js":"var _ = require(\"../lodash\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/graphlib/lib/alg/dijkstra.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"../node_modules/graphlib/lib/alg/dijkstra.js":"var _ = require(\"../lodash\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n"},"lineCount":55}},"error":null,"hash":"e9365e538fe741bafc2144a33b7694fc","cacheData":{"env":{}}}