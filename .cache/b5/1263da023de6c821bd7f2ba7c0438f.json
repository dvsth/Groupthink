{"id":"../node_modules/dagre/lib/position/bk.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\package.json","includedInParent":true,"mtime":1594481940992},{"name":"../lodash","loc":{"line":3,"column":16},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\position\\bk.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\lodash.js"},{"name":"../graphlib","loc":{"line":4,"column":20},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\position\\bk.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\graphlib.js"},{"name":"../util","loc":{"line":5,"column":19},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\position\\bk.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and KÃ¶pf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function(v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i +1), function(scanNode) {\n          _.forEach(g.predecessors(scanNode), function(u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) &&\n                !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function(i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function(u) {\n          var uNode = g.node(u);\n          if (uNode.dummy &&\n              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function(v, southLookahead) {\n      if (g.node(v).dummy === \"border\") {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function(u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function(layer) {\n    _.forEach(layer, function(v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function(layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function(v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function(w) { return pos[w]; });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function(acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function(v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function(layer) {\n    var u;\n    _.forEach(layer, function(v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach([\"u\", \"d\"], function(vert) {\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === \"l\" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function(ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(\n    findType1Conflicts(g, layering),\n    findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach([\"u\", \"d\"], function(vert) {\n    adjustedLayering = vert === \"u\" ? layering : _.values(layering).reverse();\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      if (horiz === \"r\") {\n        adjustedLayering = _.map(adjustedLayering, function(inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering,\n        align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = _.mapValues(xs, function(x) { return -x; });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function(g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, \"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = -vLabel.width / 2; break;\n      case \"r\": delta = vLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, \"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = wLabel.width / 2; break;\n      case \"r\": delta = -wLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/dagre/lib/position/bk.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}}],"sources":{"../node_modules/dagre/lib/position/bk.js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and KÃ¶pf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function(v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i +1), function(scanNode) {\n          _.forEach(g.predecessors(scanNode), function(u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) &&\n                !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function(i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function(u) {\n          var uNode = g.node(u);\n          if (uNode.dummy &&\n              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function(v, southLookahead) {\n      if (g.node(v).dummy === \"border\") {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function(u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function(layer) {\n    _.forEach(layer, function(v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function(layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function(v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function(w) { return pos[w]; });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function(acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function(v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function(layer) {\n    var u;\n    _.forEach(layer, function(v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach([\"u\", \"d\"], function(vert) {\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === \"l\" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function(ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(\n    findType1Conflicts(g, layering),\n    findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach([\"u\", \"d\"], function(vert) {\n    adjustedLayering = vert === \"u\" ? layering : _.values(layering).reverse();\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      if (horiz === \"r\") {\n        adjustedLayering = _.map(adjustedLayering, function(inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering,\n        align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = _.mapValues(xs, function(x) { return -x; });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function(g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, \"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = -vLabel.width / 2; break;\n      case \"r\": delta = vLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, \"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = wLabel.width / 2; break;\n      case \"r\": delta = -wLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n"},"lineCount":420}},"error":null,"hash":"59113b560f187ec235d62577f3cc36d0","cacheData":{"env":{}}}