{"id":"../node_modules/dagre/lib/rank/network-simplex.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\package.json","includedInParent":true,"mtime":1594481940992},{"name":"../lodash","loc":{"line":3,"column":16},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\network-simplex.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\lodash.js"},{"name":"./feasible-tree","loc":{"line":4,"column":27},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\network-simplex.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\feasible-tree.js"},{"name":"./util","loc":{"line":6,"column":23},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\network-simplex.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\util.js"},{"name":"../graphlib","loc":{"line":8,"column":24},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\network-simplex.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\graphlib.js"},{"name":"../util","loc":{"line":9,"column":23},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\network-simplex.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar feasibleTree = require(\"./feasible-tree\");\nvar slack = require(\"./util\").slack;\nvar initRank = require(\"./util\").longestPath;\nvar preorder = require(\"../graphlib\").alg.preorder;\nvar postorder = require(\"../graphlib\").alg.postorder;\nvar simplify = require(\"../util\").simplify;\n\nmodule.exports = networkSimplex;\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  initRank(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function(v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function(e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function(w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function(e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function(edge) {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n           flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n\n  return _.minBy(candidates, function(edge) { return slack(g, edge); });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; });\n  var vs = preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function(v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/dagre/lib/rank/network-simplex.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}}],"sources":{"../node_modules/dagre/lib/rank/network-simplex.js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar feasibleTree = require(\"./feasible-tree\");\nvar slack = require(\"./util\").slack;\nvar initRank = require(\"./util\").longestPath;\nvar preorder = require(\"../graphlib\").alg.preorder;\nvar postorder = require(\"../graphlib\").alg.postorder;\nvar simplify = require(\"../util\").simplify;\n\nmodule.exports = networkSimplex;\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  initRank(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function(v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function(e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function(w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function(e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function(edge) {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n           flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n\n  return _.minBy(candidates, function(edge) { return slack(g, edge); });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; });\n  var vs = preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function(v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n"},"lineCount":235}},"error":null,"hash":"db1858cdf20d7663fa36d5e507252777","cacheData":{"env":{}}}