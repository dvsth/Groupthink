{"id":"../node_modules/@projectstorm/react-diagrams-core/dist/es/entities/node/NodeModel.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node\\NodeModel.js.map","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\node\\NodeModel.ts","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\package.json","includedInParent":true,"mtime":1594481777956},{"name":"lodash","loc":{"line":4,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node\\NodeModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"},{"name":"@projectstorm/geometry","loc":{"line":5,"column":27},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node\\NodeModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\geometry\\dist\\es\\index.js"},{"name":"@projectstorm/react-canvas-core","loc":{"line":6,"column":36},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\node\\NodeModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeModel = void 0;\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass NodeModel extends react_canvas_core_1.BasePositionModel {\n    constructor(options) {\n        super(options);\n        this.ports = {};\n        this.width = 0;\n        this.height = 0;\n    }\n    getBoundingBox() {\n        return new geometry_1.Rectangle(this.getPosition(), this.width, this.height);\n    }\n    setPosition(x, y) {\n        let old = this.position;\n        super.setPosition(x, y);\n        //also update the port co-ordinates (for make glorious speed)\n        _.forEach(this.ports, (port) => {\n            port.setPosition(port.getX() + x - old.x, port.getY() + y - old.y);\n        });\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        //deserialize ports\n        _.forEach(event.data.ports, (port) => {\n            let portOb = event.engine.getFactoryForPort(port.type).generateModel({});\n            portOb.deserialize(Object.assign(Object.assign({}, event), { data: port }));\n            // the links need these\n            event.registerModel(portOb);\n            this.addPort(portOb);\n        });\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { ports: _.map(this.ports, (port) => {\n                return port.serialize();\n            }) });\n    }\n    doClone(lookupTable = {}, clone) {\n        // also clone the ports\n        clone.ports = {};\n        _.forEach(this.ports, (port) => {\n            clone.addPort(port.clone(lookupTable));\n        });\n    }\n    remove() {\n        super.remove();\n        _.forEach(this.ports, (port) => {\n            _.forEach(port.getLinks(), (link) => {\n                link.remove();\n            });\n        });\n    }\n    getPortFromID(id) {\n        for (var i in this.ports) {\n            if (this.ports[i].getID() === id) {\n                return this.ports[i];\n            }\n        }\n        return null;\n    }\n    getLink(id) {\n        for (let portID in this.ports) {\n            const links = this.ports[portID].getLinks();\n            if (links[id]) {\n                return links[id];\n            }\n        }\n    }\n    getPort(name) {\n        return this.ports[name];\n    }\n    getPorts() {\n        return this.ports;\n    }\n    removePort(port) {\n        // clear the port from the links\n        for (let link of _.values(port.getLinks())) {\n            link.clearPort(port);\n        }\n        //clear the parent node reference\n        if (this.ports[port.getName()]) {\n            this.ports[port.getName()].setParent(null);\n            delete this.ports[port.getName()];\n        }\n    }\n    addPort(port) {\n        port.setParent(this);\n        this.ports[port.getName()] = port;\n        return port;\n    }\n    updateDimensions({ width, height }) {\n        this.width = width;\n        this.height = height;\n    }\n}\nexports.NodeModel = NodeModel;\n"},"sourceMaps":{"js":{"version":3,"file":"NodeModel.js","sourceRoot":"","sources":["../../../../src/entities/node/NodeModel.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { PortModel } from '../port/PortModel';\nimport { LinkModel } from '../link/LinkModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEntityEvent<NodeModel>): void;\n}\n\nexport interface NodeModelGenerics extends BasePositionModelGenerics {\n\tLISTENER: NodeModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class NodeModel<G extends NodeModelGenerics = NodeModelGenerics> extends BasePositionModel<G> {\n\tprotected ports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.ports = {};\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(this.getPosition(), this.width, this.height);\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\n\t\t//also update the port co-ordinates (for make glorious speed)\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tport.setPosition(port.getX() + x - old.x, port.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\n\t\t//deserialize ports\n\t\t_.forEach(event.data.ports, (port: any) => {\n\t\t\tlet portOb = (event.engine as DiagramEngine).getFactoryForPort(port.type).generateModel({});\n\t\t\tportOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: port\n\t\t\t});\n\t\t\t// the links need these\n\t\t\tevent.registerModel(portOb);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tports: _.map(this.ports, (port) => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, (port) => {\n\t\t\t_.forEach(port.getLinks(), (link) => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].getID() === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetLink(id: string): LinkModel {\n\t\tfor (let portID in this.ports) {\n\t\t\tconst links = this.ports[portID].getLinks();\n\t\t\tif (links[id]) {\n\t\t\t\treturn links[id];\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t// clear the port from the links\n\t\tfor (let link of _.values(port.getLinks())) {\n\t\t\tlink.clearPort(port);\n\t\t}\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.getName()]) {\n\t\t\tthis.ports[port.getName()].setParent(null);\n\t\t\tdelete this.ports[port.getName()];\n\t\t}\n\t}\n\n\taddPort(port: PortModel): PortModel {\n\t\tport.setParent(this);\n\t\tthis.ports[port.getName()] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n"]}},"error":null,"hash":"c0e938c9fc0090445745d550973458e6","cacheData":{"env":{}}}