{"id":"../node_modules/dagre/lib/rank/util.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\package.json","includedInParent":true,"mtime":1594481940992},{"name":"../lodash","loc":{"line":3,"column":16},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\rank\\util.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\dagre\\lib\\lodash.js"}],"generated":{"js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = {\n  longestPath: longestPath,\n  slack: slack\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n        rank === undefined || // return value of _.map([]) for Lodash 4\n        rank === null) { // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/dagre/lib/rank/util.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"../node_modules/dagre/lib/rank/util.js":"\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = {\n  longestPath: longestPath,\n  slack: slack\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n        rank === undefined || // return value of _.map([]) for Lodash 4\n        rank === null) { // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n"},"lineCount":64}},"error":null,"hash":"e81d3fddb8fc8f77d87fd58a095d6ced","cacheData":{"env":{}}}