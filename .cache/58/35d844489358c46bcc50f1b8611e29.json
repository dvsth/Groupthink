{"id":"../node_modules/@projectstorm/react-diagrams-defaults/dist/es/node/DefaultNodeWidget.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeWidget.js.map","includedInParent":true,"mtime":1594481777940},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\src\\node\\DefaultNodeWidget.tsx","includedInParent":true,"mtime":1594481777940},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\package.json","includedInParent":true,"mtime":1594481777940},{"name":"react","loc":{"line":4,"column":22},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\react\\index.js"},{"name":"lodash","loc":{"line":5,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"},{"name":"../port/DefaultPortLabelWidget","loc":{"line":6,"column":41},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\port\\DefaultPortLabelWidget.js"},{"name":"@emotion/styled","loc":{"line":7,"column":25},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-defaults\\dist\\es\\node\\DefaultNodeWidget.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@emotion\\styled\\dist\\styled.browser.esm.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultNodeWidget = void 0;\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst DefaultPortLabelWidget_1 = require(\"../port/DefaultPortLabelWidget\");\nconst styled_1 = require(\"@emotion/styled\");\nvar S;\n(function (S) {\n    S.Node = styled_1.default.div `\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\n\t`;\n    S.Title = styled_1.default.div `\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n    S.TitleName = styled_1.default.div `\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n    S.Ports = styled_1.default.div `\n\t\tdisplay: flex;\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n\t`;\n    S.PortsContainer = styled_1.default.div `\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n})(S || (S = {}));\n/**\n * Default node that models the DefaultNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\nclass DefaultNodeWidget extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.generatePort = (port) => {\n            return React.createElement(DefaultPortLabelWidget_1.DefaultPortLabel, { engine: this.props.engine, port: port, key: port.getID() });\n        };\n    }\n    render() {\n        return (React.createElement(S.Node, { \"data-default-node-name\": this.props.node.getOptions().name, selected: this.props.node.isSelected(), background: this.props.node.getOptions().color },\n            React.createElement(S.Title, null,\n                React.createElement(S.TitleName, null, this.props.node.getOptions().name)),\n            React.createElement(S.Ports, null,\n                React.createElement(S.PortsContainer, null, _.map(this.props.node.getInPorts(), this.generatePort)),\n                React.createElement(S.PortsContainer, null, _.map(this.props.node.getOutPorts(), this.generatePort)))));\n    }\n}\nexports.DefaultNodeWidget = DefaultNodeWidget;\n"},"sourceMaps":{"js":{"version":3,"file":"DefaultNodeWidget.js","sourceRoot":"","sources":["../../../src/node/DefaultNodeWidget.tsx"],"names":[],"mappings":";;;AAAA,+BAA+B;AAC/B,4BAA4B;AAG5B,2EAAkE;AAClE,4CAAqC;AAGrC,IAAU,CAAC,CA0CV;AA1CD,WAAU,CAAC;IACG,MAAI,GAAG,gBAAM,CAAC,GAAG,CAA2C;sBACpD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU;;;;;;;sBAOnB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC;EACpE,CAAC;IAEW,OAAK,GAAG,gBAAM,CAAC,GAAG,CAAA;;;;;EAK9B,CAAC;IAEW,WAAS,GAAG,gBAAM,CAAC,GAAG,CAAA;;;EAGlC,CAAC;IAEW,OAAK,GAAG,gBAAM,CAAC,GAAG,CAAA;;;EAG9B,CAAC;IAEW,gBAAc,GAAG,gBAAM,CAAC,GAAG,CAAA;;;;;;;;;;;;EAYvC,CAAC;AACH,CAAC,EA1CS,CAAC,KAAD,CAAC,QA0CV;AAOD;;;GAGG;AACH,MAAa,iBAAkB,SAAQ,KAAK,CAAC,SAA2B;IAAxE;;QACC,iBAAY,GAAG,CAAC,IAAI,EAAE,EAAE;YACvB,OAAO,oBAAC,yCAAgB,IAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,GAAI,CAAC;QACvF,CAAC,CAAC;IAkBH,CAAC;IAhBA,MAAM;QACL,OAAO,CACN,oBAAC,CAAC,CAAC,IAAI,8BACkB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,EACzD,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,EACtC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK;YAC9C,oBAAC,CAAC,CAAC,KAAK;gBACP,oBAAC,CAAC,CAAC,SAAS,QAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAe,CACrD;YACV,oBAAC,CAAC,CAAC,KAAK;gBACP,oBAAC,CAAC,CAAC,cAAc,QAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAoB;gBAC7F,oBAAC,CAAC,CAAC,cAAc,QAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAoB,CACrF,CACF,CACT,CAAC;IACH,CAAC;CACD;AArBD,8CAqBC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { DefaultNodeModel } from './DefaultNodeModel';\nimport { DefaultPortLabel } from '../port/DefaultPortLabelWidget';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nnamespace S {\n\texport const Node = styled.div<{ background: string; selected: boolean }>`\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: 5px;\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\tborder: solid 2px black;\n\t\toverflow: visible;\n\t\tfont-size: 11px;\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\n\t`;\n\n\texport const Title = styled.div`\n\t\tbackground: rgba(0, 0, 0, 0.3);\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n\n\texport const TitleName = styled.div`\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t`;\n\n\texport const Ports = styled.div`\n\t\tdisplay: flex;\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\n\t`;\n\n\texport const PortsContainer = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n}\n\nexport interface DefaultNodeProps {\n\tnode: DefaultNodeModel;\n\tengine: DiagramEngine;\n}\n\n/**\n * Default node that models the DefaultNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\nexport class DefaultNodeWidget extends React.Component<DefaultNodeProps> {\n\tgeneratePort = (port) => {\n\t\treturn <DefaultPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<S.Node\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\n\t\t\t\tselected={this.props.node.isSelected()}\n\t\t\t\tbackground={this.props.node.getOptions().color}>\n\t\t\t\t<S.Title>\n\t\t\t\t\t<S.TitleName>{this.props.node.getOptions().name}</S.TitleName>\n\t\t\t\t</S.Title>\n\t\t\t\t<S.Ports>\n\t\t\t\t\t<S.PortsContainer>{_.map(this.props.node.getInPorts(), this.generatePort)}</S.PortsContainer>\n\t\t\t\t\t<S.PortsContainer>{_.map(this.props.node.getOutPorts(), this.generatePort)}</S.PortsContainer>\n\t\t\t\t</S.Ports>\n\t\t\t</S.Node>\n\t\t);\n\t}\n}\n"]}},"error":null,"hash":"8fbbbf1efabc2fa1f46f1f1ae9369e8d","cacheData":{"env":{}}}