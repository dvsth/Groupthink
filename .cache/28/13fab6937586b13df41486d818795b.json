{"id":"../node_modules/@projectstorm/react-canvas-core/dist/es/core-actions/Action.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-actions\\Action.js.map","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\src\\core-actions\\Action.ts","includedInParent":true,"mtime":1594481777970},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\package.json","includedInParent":true,"mtime":1594481777970},{"name":"../Toolkit","loc":{"line":4,"column":26},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\core-actions\\Action.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\Toolkit.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Action = exports.InputType = void 0;\nconst Toolkit_1 = require(\"../Toolkit\");\nvar InputType;\n(function (InputType) {\n    InputType[\"MOUSE_DOWN\"] = \"mouse-down\";\n    InputType[\"MOUSE_UP\"] = \"mouse-up\";\n    InputType[\"MOUSE_MOVE\"] = \"mouse-move\";\n    InputType[\"MOUSE_WHEEL\"] = \"mouse-wheel\";\n    InputType[\"KEY_DOWN\"] = \"key-down\";\n    InputType[\"KEY_UP\"] = \"key-up\";\n})(InputType = exports.InputType || (exports.InputType = {}));\nclass Action {\n    constructor(options) {\n        this.options = options;\n        this.id = Toolkit_1.Toolkit.UID();\n    }\n    setEngine(engine) {\n        this.engine = engine;\n    }\n}\nexports.Action = Action;\n"},"sourceMaps":{"js":{"version":3,"file":"Action.js","sourceRoot":"","sources":["../../../src/core-actions/Action.ts"],"names":[],"mappings":";;;AACA,wCAAqC;AAIrC,IAAY,SAOX;AAPD,WAAY,SAAS;IACpB,sCAAyB,CAAA;IACzB,kCAAqB,CAAA;IACrB,sCAAyB,CAAA;IACzB,wCAA2B,CAAA;IAC3B,kCAAqB,CAAA;IACrB,8BAAiB,CAAA;AAClB,CAAC,EAPW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAOpB;AAqBD,MAAa,MAAM;IAKlB,YAAY,OAAsB;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,EAAE,GAAG,iBAAO,CAAC,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,SAAS,CAAC,MAAS;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;CACD;AAbD,wBAaC","sourcesContent":["import { MouseEvent, KeyboardEvent, WheelEvent, SyntheticEvent } from 'react';\nimport { Toolkit } from '../Toolkit';\nimport { CanvasEngine } from '../CanvasEngine';\nimport { BaseModel } from '../core-models/BaseModel';\n\nexport enum InputType {\n\tMOUSE_DOWN = 'mouse-down',\n\tMOUSE_UP = 'mouse-up',\n\tMOUSE_MOVE = 'mouse-move',\n\tMOUSE_WHEEL = 'mouse-wheel',\n\tKEY_DOWN = 'key-down',\n\tKEY_UP = 'key-up'\n}\n\nexport interface Mapping {\n\t[InputType.MOUSE_DOWN]: MouseEvent;\n\t[InputType.MOUSE_UP]: MouseEvent;\n\t[InputType.MOUSE_MOVE]: MouseEvent;\n\t[InputType.MOUSE_WHEEL]: WheelEvent;\n\t[InputType.KEY_DOWN]: KeyboardEvent;\n\t[InputType.KEY_UP]: KeyboardEvent;\n}\n\nexport interface ActionEvent<Event extends SyntheticEvent = SyntheticEvent, Model extends BaseModel = BaseModel> {\n\tevent: Event;\n\tmodel?: Model;\n}\n\nexport interface ActionOptions {\n\ttype: InputType;\n\tfire: (event: ActionEvent<Mapping[this['type']]>) => void;\n}\n\nexport class Action<T extends CanvasEngine = CanvasEngine> {\n\toptions: ActionOptions;\n\tid: string;\n\tengine: T;\n\n\tconstructor(options: ActionOptions) {\n\t\tthis.options = options;\n\t\tthis.id = Toolkit.UID();\n\t}\n\n\tsetEngine(engine: T) {\n\t\tthis.engine = engine;\n\t}\n}\n"]}},"error":null,"hash":"00aeff08a1bd2cc44245fb3947eeb40f","cacheData":{"env":{}}}