{"id":"../node_modules/@projectstorm/react-diagrams-core/dist/es/entities/link/LinkModel.js","dependencies":[{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\link\\LinkModel.js.map","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\src\\entities\\link\\LinkModel.ts","includedInParent":true,"mtime":1594481777956},{"name":"C:\\myprojects\\groupthink\\Groupthink\\package.json","includedInParent":true,"mtime":1594485675900},{"name":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\package.json","includedInParent":true,"mtime":1594481777956},{"name":"./PointModel","loc":{"line":4,"column":29},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\link\\LinkModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\link\\PointModel.js"},{"name":"lodash","loc":{"line":5,"column":18},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\link\\LinkModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\lodash\\lodash.js"},{"name":"@projectstorm/geometry","loc":{"line":6,"column":27},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\link\\LinkModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\geometry\\dist\\es\\index.js"},{"name":"@projectstorm/react-canvas-core","loc":{"line":7,"column":36},"parent":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-diagrams-core\\dist\\es\\entities\\link\\LinkModel.js","resolved":"C:\\myprojects\\groupthink\\Groupthink\\node_modules\\@projectstorm\\react-canvas-core\\dist\\es\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkModel = void 0;\nconst PointModel_1 = require(\"./PointModel\");\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass LinkModel extends react_canvas_core_1.BaseModel {\n    constructor(options) {\n        super(options);\n        this.points = [\n            new PointModel_1.PointModel({\n                link: this\n            }),\n            new PointModel_1.PointModel({\n                link: this\n            })\n        ];\n        this.sourcePort = null;\n        this.targetPort = null;\n        this.renderedPaths = [];\n        this.labels = [];\n    }\n    getBoundingBox() {\n        return geometry_1.Polygon.boundingBoxFromPoints(_.map(this.points, (point) => {\n            return point.getPosition();\n        }));\n    }\n    getSelectionEntities() {\n        if (this.getTargetPort() && this.getSourcePort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n        }\n        // allow selection of the first point\n        if (!this.getSourcePort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n        }\n        // allow selection of the last point\n        if (!this.getTargetPort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n        }\n        return super.getSelectionEntities().concat(this.points);\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.points = _.map(event.data.points || [], (point) => {\n            var p = new PointModel_1.PointModel({\n                link: this,\n                position: new geometry_1.Point(point.x, point.y)\n            });\n            p.deserialize(Object.assign(Object.assign({}, event), { data: point }));\n            return p;\n        });\n        //deserialize labels\n        _.forEach(event.data.labels || [], (label) => {\n            let labelOb = event.engine.getFactoryForLabel(label.type).generateModel({});\n            labelOb.deserialize(Object.assign(Object.assign({}, event), { data: label }));\n            this.addLabel(labelOb);\n        });\n        // these happen async, so we use the promises for these (they need to be done like this without the async keyword\n        // because we need the deserailize method to finish for other methods while this happen\n        if (event.data.target) {\n            event.getModel(event.data.targetPort).then((model) => {\n                this.setTargetPort(model);\n            });\n        }\n        if (event.data.source) {\n            event.getModel(event.data.sourcePort).then((model) => {\n                this.setSourcePort(model);\n            });\n        }\n    }\n    getRenderedPath() {\n        return this.renderedPaths;\n    }\n    setRenderedPaths(paths) {\n        this.renderedPaths = paths;\n    }\n    serialize() {\n        return Object.assign(Object.assign({}, super.serialize()), { source: this.sourcePort ? this.sourcePort.getParent().getID() : null, sourcePort: this.sourcePort ? this.sourcePort.getID() : null, target: this.targetPort ? this.targetPort.getParent().getID() : null, targetPort: this.targetPort ? this.targetPort.getID() : null, points: _.map(this.points, (point) => {\n                return point.serialize();\n            }), labels: _.map(this.labels, (label) => {\n                return label.serialize();\n            }) });\n    }\n    doClone(lookupTable = {}, clone) {\n        clone.setPoints(_.map(this.getPoints(), (point) => {\n            return point.clone(lookupTable);\n        }));\n        if (this.sourcePort) {\n            clone.setSourcePort(this.sourcePort.clone(lookupTable));\n        }\n        if (this.targetPort) {\n            clone.setTargetPort(this.targetPort.clone(lookupTable));\n        }\n    }\n    clearPort(port) {\n        if (this.sourcePort === port) {\n            this.setSourcePort(null);\n        }\n        else if (this.targetPort === port) {\n            this.setTargetPort(null);\n        }\n    }\n    remove() {\n        if (this.sourcePort) {\n            this.sourcePort.removeLink(this);\n        }\n        if (this.targetPort) {\n            this.targetPort.removeLink(this);\n        }\n        super.remove();\n    }\n    isLastPoint(point) {\n        var index = this.getPointIndex(point);\n        return index === this.points.length - 1;\n    }\n    getPointIndex(point) {\n        return this.points.indexOf(point);\n    }\n    getPointModel(id) {\n        for (var i = 0; i < this.points.length; i++) {\n            if (this.points[i].getID() === id) {\n                return this.points[i];\n            }\n        }\n        return null;\n    }\n    getPortForPoint(point) {\n        if (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n            return this.sourcePort;\n        }\n        if (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n            return this.targetPort;\n        }\n        return null;\n    }\n    getPointForPort(port) {\n        if (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n            return this.getFirstPoint();\n        }\n        if (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n            return this.getLastPoint();\n        }\n        return null;\n    }\n    getFirstPoint() {\n        return this.points[0];\n    }\n    getLastPoint() {\n        return this.points[this.points.length - 1];\n    }\n    setSourcePort(port) {\n        if (port !== null) {\n            port.addLink(this);\n        }\n        if (this.sourcePort !== null) {\n            this.sourcePort.removeLink(this);\n        }\n        this.sourcePort = port;\n        this.fireEvent({ port }, 'sourcePortChanged');\n    }\n    getSourcePort() {\n        return this.sourcePort;\n    }\n    getTargetPort() {\n        return this.targetPort;\n    }\n    setTargetPort(port) {\n        if (port !== null) {\n            port.addLink(this);\n        }\n        if (this.targetPort !== null) {\n            this.targetPort.removeLink(this);\n        }\n        this.targetPort = port;\n        this.fireEvent({ port }, 'targetPortChanged');\n    }\n    point(x, y, index = 1) {\n        return this.addPoint(this.generatePoint(x, y), index);\n    }\n    addLabel(label) {\n        label.setParent(this);\n        this.labels.push(label);\n    }\n    getPoints() {\n        return this.points;\n    }\n    getLabels() {\n        return this.labels;\n    }\n    setPoints(points) {\n        _.forEach(points, (point) => {\n            point.setParent(this);\n        });\n        this.points = points;\n    }\n    removePoint(pointModel) {\n        this.points.splice(this.getPointIndex(pointModel), 1);\n    }\n    removePointsBefore(pointModel) {\n        this.points.splice(0, this.getPointIndex(pointModel));\n    }\n    removePointsAfter(pointModel) {\n        this.points.splice(this.getPointIndex(pointModel) + 1);\n    }\n    removeMiddlePoints() {\n        if (this.points.length > 2) {\n            this.points.splice(0, this.points.length - 2);\n        }\n    }\n    addPoint(pointModel, index = 1) {\n        pointModel.setParent(this);\n        this.points.splice(index, 0, pointModel);\n        return pointModel;\n    }\n    generatePoint(x = 0, y = 0) {\n        return new PointModel_1.PointModel({\n            link: this,\n            position: new geometry_1.Point(x, y)\n        });\n    }\n}\nexports.LinkModel = LinkModel;\n"},"sourceMaps":{"js":{"version":3,"file":"LinkModel.js","sourceRoot":"","sources":["../../../../src/entities/link/LinkModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { PortModel } from '../port/PortModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelModel } from '../label/LabelModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { Point, Polygon, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModel,\n\tBaseModelGenerics,\n\tBaseModelListener,\n\tDeserializeEvent,\n\tModelGeometryInterface\n} from '@projectstorm/react-canvas-core';\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport interface LinkModelGenerics extends BaseModelGenerics {\n\tLISTENER: LinkModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class LinkModel<G extends LinkModelGenerics = LinkModelGenerics> extends BaseModel<G>\n\timplements ModelGeometryInterface {\n\tprotected sourcePort: PortModel | null;\n\tprotected targetPort: PortModel | null;\n\n\tprotected labels: LabelModel[];\n\tprotected points: PointModel[];\n\n\tprotected renderedPaths: SVGPathElement[];\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.points = [\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t}),\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t})\n\t\t];\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.renderedPaths = [];\n\t\tthis.labels = [];\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Polygon.boundingBoxFromPoints(\n\t\t\t_.map(this.points, (point: PointModel) => {\n\t\t\t\treturn point.getPosition();\n\t\t\t})\n\t\t);\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\tif (this.getTargetPort() && this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the first point\n\t\tif (!this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the last point\n\t\tif (!this.getTargetPort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n\t\t}\n\t\treturn super.getSelectionEntities().concat(this.points);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.points = _.map(event.data.points || [], (point) => {\n\t\t\tvar p = new PointModel({\n\t\t\t\tlink: this,\n\t\t\t\tposition: new Point(point.x, point.y)\n\t\t\t});\n\t\t\tp.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: point\n\t\t\t});\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(event.data.labels || [], (label: any) => {\n\t\t\tlet labelOb = (event.engine as DiagramEngine).getFactoryForLabel(label.type).generateModel({});\n\t\t\tlabelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: label\n\t\t\t});\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\t// these happen async, so we use the promises for these (they need to be done like this without the async keyword\n\t\t// because we need the deserailize method to finish for other methods while this happen\n\t\tif (event.data.target) {\n\t\t\tevent.getModel(event.data.targetPort).then((model: PortModel) => {\n\t\t\t\tthis.setTargetPort(model);\n\t\t\t});\n\t\t}\n\t\tif (event.data.source) {\n\t\t\tevent.getModel(event.data.sourcePort).then((model: PortModel) => {\n\t\t\t\tthis.setSourcePort(model);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetRenderedPath(): SVGPathElement[] {\n\t\treturn this.renderedPaths;\n\t}\n\n\tsetRenderedPaths(paths: SVGPathElement[]) {\n\t\tthis.renderedPaths = paths;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().getID() : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.getID() : null,\n\t\t\tpoints: _.map(this.points, (point) => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\tlabels: _.map(this.labels, (label) => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tclearPort(port: PortModel) {\n\t\tif (this.sourcePort === port) {\n\t\t\tthis.setSourcePort(null);\n\t\t} else if (this.targetPort === port) {\n\t\t\tthis.setTargetPort(null);\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].getID() === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.fireEvent({ port }, 'sourcePortChanged');\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.fireEvent({ port }, 'targetPortChanged');\n\t}\n\n\tpoint(x: number, y: number, index: number = 1): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y), index);\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tgetLabels() {\n\t\treturn this.labels;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, (point) => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(0, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel({\n\t\t\tlink: this,\n\t\t\tposition: new Point(x, y)\n\t\t});\n\t}\n}\n"]}},"error":null,"hash":"6cd374021481e45b5255534587495291","cacheData":{"env":{}}}